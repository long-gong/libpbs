// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reconciliation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_reconciliation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_reconciliation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_reconciliation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_reconciliation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_reconciliation_2eproto;
namespace reconciliation {
class DDigestReply;
class DDigestReplyDefaultTypeInternal;
extern DDigestReplyDefaultTypeInternal _DDigestReply_default_instance_;
class DDigestRequest;
class DDigestRequestDefaultTypeInternal;
extern DDigestRequestDefaultTypeInternal _DDigestRequest_default_instance_;
class EstimateReply;
class EstimateReplyDefaultTypeInternal;
extern EstimateReplyDefaultTypeInternal _EstimateReply_default_instance_;
class EstimateRequest;
class EstimateRequestDefaultTypeInternal;
extern EstimateRequestDefaultTypeInternal _EstimateRequest_default_instance_;
class GrapheneReply;
class GrapheneReplyDefaultTypeInternal;
extern GrapheneReplyDefaultTypeInternal _GrapheneReply_default_instance_;
class GrapheneRequest;
class GrapheneRequestDefaultTypeInternal;
extern GrapheneRequestDefaultTypeInternal _GrapheneRequest_default_instance_;
class IbfCell;
class IbfCellDefaultTypeInternal;
extern IbfCellDefaultTypeInternal _IbfCell_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class PbsReply;
class PbsReplyDefaultTypeInternal;
extern PbsReplyDefaultTypeInternal _PbsReply_default_instance_;
class PbsRequest;
class PbsRequestDefaultTypeInternal;
extern PbsRequestDefaultTypeInternal _PbsRequest_default_instance_;
class PinSketchReply;
class PinSketchReplyDefaultTypeInternal;
extern PinSketchReplyDefaultTypeInternal _PinSketchReply_default_instance_;
class PinSketchRequest;
class PinSketchRequestDefaultTypeInternal;
extern PinSketchRequestDefaultTypeInternal _PinSketchRequest_default_instance_;
class SetUpReply;
class SetUpReplyDefaultTypeInternal;
extern SetUpReplyDefaultTypeInternal _SetUpReply_default_instance_;
class SetUpRequest;
class SetUpRequestDefaultTypeInternal;
extern SetUpRequestDefaultTypeInternal _SetUpRequest_default_instance_;
class SynchronizeMessage;
class SynchronizeMessageDefaultTypeInternal;
extern SynchronizeMessageDefaultTypeInternal _SynchronizeMessage_default_instance_;
}  // namespace reconciliation
PROTOBUF_NAMESPACE_OPEN
template<> ::reconciliation::DDigestReply* Arena::CreateMaybeMessage<::reconciliation::DDigestReply>(Arena*);
template<> ::reconciliation::DDigestRequest* Arena::CreateMaybeMessage<::reconciliation::DDigestRequest>(Arena*);
template<> ::reconciliation::EstimateReply* Arena::CreateMaybeMessage<::reconciliation::EstimateReply>(Arena*);
template<> ::reconciliation::EstimateRequest* Arena::CreateMaybeMessage<::reconciliation::EstimateRequest>(Arena*);
template<> ::reconciliation::GrapheneReply* Arena::CreateMaybeMessage<::reconciliation::GrapheneReply>(Arena*);
template<> ::reconciliation::GrapheneRequest* Arena::CreateMaybeMessage<::reconciliation::GrapheneRequest>(Arena*);
template<> ::reconciliation::IbfCell* Arena::CreateMaybeMessage<::reconciliation::IbfCell>(Arena*);
template<> ::reconciliation::KeyValue* Arena::CreateMaybeMessage<::reconciliation::KeyValue>(Arena*);
template<> ::reconciliation::PbsReply* Arena::CreateMaybeMessage<::reconciliation::PbsReply>(Arena*);
template<> ::reconciliation::PbsRequest* Arena::CreateMaybeMessage<::reconciliation::PbsRequest>(Arena*);
template<> ::reconciliation::PinSketchReply* Arena::CreateMaybeMessage<::reconciliation::PinSketchReply>(Arena*);
template<> ::reconciliation::PinSketchRequest* Arena::CreateMaybeMessage<::reconciliation::PinSketchRequest>(Arena*);
template<> ::reconciliation::SetUpReply* Arena::CreateMaybeMessage<::reconciliation::SetUpReply>(Arena*);
template<> ::reconciliation::SetUpRequest* Arena::CreateMaybeMessage<::reconciliation::SetUpRequest>(Arena*);
template<> ::reconciliation::SynchronizeMessage* Arena::CreateMaybeMessage<::reconciliation::SynchronizeMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace reconciliation {

enum SetUpRequest_Method : int {
  SetUpRequest_Method_DDigest = 0,
  SetUpRequest_Method_PinSketch = 1,
  SetUpRequest_Method_Graphene = 2,
  SetUpRequest_Method_PBS = 3,
  SetUpRequest_Method_END = 4,
  SetUpRequest_Method_SetUpRequest_Method_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SetUpRequest_Method_SetUpRequest_Method_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SetUpRequest_Method_IsValid(int value);
constexpr SetUpRequest_Method SetUpRequest_Method_Method_MIN = SetUpRequest_Method_DDigest;
constexpr SetUpRequest_Method SetUpRequest_Method_Method_MAX = SetUpRequest_Method_END;
constexpr int SetUpRequest_Method_Method_ARRAYSIZE = SetUpRequest_Method_Method_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetUpRequest_Method_descriptor();
template<typename T>
inline const std::string& SetUpRequest_Method_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetUpRequest_Method>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetUpRequest_Method_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetUpRequest_Method_descriptor(), enum_t_value);
}
inline bool SetUpRequest_Method_Parse(
    const std::string& name, SetUpRequest_Method* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetUpRequest_Method>(
    SetUpRequest_Method_descriptor(), name, value);
}
enum SetUpReply_PreviousExperimentStatus : int {
  SetUpReply_PreviousExperimentStatus_NA = 0,
  SetUpReply_PreviousExperimentStatus_SUCCEED = 1,
  SetUpReply_PreviousExperimentStatus_FAILED = 2,
  SetUpReply_PreviousExperimentStatus_SetUpReply_PreviousExperimentStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SetUpReply_PreviousExperimentStatus_SetUpReply_PreviousExperimentStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SetUpReply_PreviousExperimentStatus_IsValid(int value);
constexpr SetUpReply_PreviousExperimentStatus SetUpReply_PreviousExperimentStatus_PreviousExperimentStatus_MIN = SetUpReply_PreviousExperimentStatus_NA;
constexpr SetUpReply_PreviousExperimentStatus SetUpReply_PreviousExperimentStatus_PreviousExperimentStatus_MAX = SetUpReply_PreviousExperimentStatus_FAILED;
constexpr int SetUpReply_PreviousExperimentStatus_PreviousExperimentStatus_ARRAYSIZE = SetUpReply_PreviousExperimentStatus_PreviousExperimentStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetUpReply_PreviousExperimentStatus_descriptor();
template<typename T>
inline const std::string& SetUpReply_PreviousExperimentStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetUpReply_PreviousExperimentStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetUpReply_PreviousExperimentStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetUpReply_PreviousExperimentStatus_descriptor(), enum_t_value);
}
inline bool SetUpReply_PreviousExperimentStatus_Parse(
    const std::string& name, SetUpReply_PreviousExperimentStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetUpReply_PreviousExperimentStatus>(
    SetUpReply_PreviousExperimentStatus_descriptor(), name, value);
}
// ===================================================================

class SetUpRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reconciliation.SetUpRequest) */ {
 public:
  inline SetUpRequest() : SetUpRequest(nullptr) {};
  virtual ~SetUpRequest();

  SetUpRequest(const SetUpRequest& from);
  SetUpRequest(SetUpRequest&& from) noexcept
    : SetUpRequest() {
    *this = ::std::move(from);
  }

  inline SetUpRequest& operator=(const SetUpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUpRequest& operator=(SetUpRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetUpRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUpRequest* internal_default_instance() {
    return reinterpret_cast<const SetUpRequest*>(
               &_SetUpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetUpRequest& a, SetUpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUpRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetUpRequest* New() const final {
    return CreateMaybeMessage<SetUpRequest>(nullptr);
  }

  SetUpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetUpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetUpRequest& from);
  void MergeFrom(const SetUpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reconciliation.SetUpRequest";
  }
  protected:
  explicit SetUpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_reconciliation_2eproto);
    return ::descriptor_table_reconciliation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetUpRequest_Method Method;
  static constexpr Method DDigest =
    SetUpRequest_Method_DDigest;
  static constexpr Method PinSketch =
    SetUpRequest_Method_PinSketch;
  static constexpr Method Graphene =
    SetUpRequest_Method_Graphene;
  static constexpr Method PBS =
    SetUpRequest_Method_PBS;
  static constexpr Method END =
    SetUpRequest_Method_END;
  static inline bool Method_IsValid(int value) {
    return SetUpRequest_Method_IsValid(value);
  }
  static constexpr Method Method_MIN =
    SetUpRequest_Method_Method_MIN;
  static constexpr Method Method_MAX =
    SetUpRequest_Method_Method_MAX;
  static constexpr int Method_ARRAYSIZE =
    SetUpRequest_Method_Method_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Method_descriptor() {
    return SetUpRequest_Method_descriptor();
  }
  template<typename T>
  static inline const std::string& Method_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Method>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Method_Name.");
    return SetUpRequest_Method_Name(enum_t_value);
  }
  static inline bool Method_Parse(const std::string& name,
      Method* value) {
    return SetUpRequest_Method_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNextAlgorithmFieldNumber = 1,
    kSeedFieldNumber = 2,
    kDFieldNumber = 3,
    kObjectSzFieldNumber = 4,
    kUszFieldNumber = 5,
  };
  // .reconciliation.SetUpRequest.Method next_algorithm = 1;
  void clear_next_algorithm();
  ::reconciliation::SetUpRequest_Method next_algorithm() const;
  void set_next_algorithm(::reconciliation::SetUpRequest_Method value);
  private:
  ::reconciliation::SetUpRequest_Method _internal_next_algorithm() const;
  void _internal_set_next_algorithm(::reconciliation::SetUpRequest_Method value);
  public:

  // uint32 seed = 2;
  void clear_seed();
  ::PROTOBUF_NAMESPACE_ID::uint32 seed() const;
  void set_seed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seed() const;
  void _internal_set_seed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 d = 3;
  void clear_d();
  ::PROTOBUF_NAMESPACE_ID::uint32 d() const;
  void set_d(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_d() const;
  void _internal_set_d(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 object_sz = 4;
  void clear_object_sz();
  ::PROTOBUF_NAMESPACE_ID::uint32 object_sz() const;
  void set_object_sz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_object_sz() const;
  void _internal_set_object_sz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 usz = 5;
  void clear_usz();
  ::PROTOBUF_NAMESPACE_ID::uint32 usz() const;
  void set_usz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usz() const;
  void _internal_set_usz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:reconciliation.SetUpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int next_algorithm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 d_;
  ::PROTOBUF_NAMESPACE_ID::uint32 object_sz_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reconciliation_2eproto;
};
// -------------------------------------------------------------------

class SetUpReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reconciliation.SetUpReply) */ {
 public:
  inline SetUpReply() : SetUpReply(nullptr) {};
  virtual ~SetUpReply();

  SetUpReply(const SetUpReply& from);
  SetUpReply(SetUpReply&& from) noexcept
    : SetUpReply() {
    *this = ::std::move(from);
  }

  inline SetUpReply& operator=(const SetUpReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUpReply& operator=(SetUpReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetUpReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUpReply* internal_default_instance() {
    return reinterpret_cast<const SetUpReply*>(
               &_SetUpReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetUpReply& a, SetUpReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUpReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUpReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetUpReply* New() const final {
    return CreateMaybeMessage<SetUpReply>(nullptr);
  }

  SetUpReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetUpReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetUpReply& from);
  void MergeFrom(const SetUpReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUpReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reconciliation.SetUpReply";
  }
  protected:
  explicit SetUpReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_reconciliation_2eproto);
    return ::descriptor_table_reconciliation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetUpReply_PreviousExperimentStatus PreviousExperimentStatus;
  static constexpr PreviousExperimentStatus NA =
    SetUpReply_PreviousExperimentStatus_NA;
  static constexpr PreviousExperimentStatus SUCCEED =
    SetUpReply_PreviousExperimentStatus_SUCCEED;
  static constexpr PreviousExperimentStatus FAILED =
    SetUpReply_PreviousExperimentStatus_FAILED;
  static inline bool PreviousExperimentStatus_IsValid(int value) {
    return SetUpReply_PreviousExperimentStatus_IsValid(value);
  }
  static constexpr PreviousExperimentStatus PreviousExperimentStatus_MIN =
    SetUpReply_PreviousExperimentStatus_PreviousExperimentStatus_MIN;
  static constexpr PreviousExperimentStatus PreviousExperimentStatus_MAX =
    SetUpReply_PreviousExperimentStatus_PreviousExperimentStatus_MAX;
  static constexpr int PreviousExperimentStatus_ARRAYSIZE =
    SetUpReply_PreviousExperimentStatus_PreviousExperimentStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PreviousExperimentStatus_descriptor() {
    return SetUpReply_PreviousExperimentStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& PreviousExperimentStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PreviousExperimentStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PreviousExperimentStatus_Name.");
    return SetUpReply_PreviousExperimentStatus_Name(enum_t_value);
  }
  static inline bool PreviousExperimentStatus_Parse(const std::string& name,
      PreviousExperimentStatus* value) {
    return SetUpReply_PreviousExperimentStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .reconciliation.SetUpReply.PreviousExperimentStatus status = 1;
  void clear_status();
  ::reconciliation::SetUpReply_PreviousExperimentStatus status() const;
  void set_status(::reconciliation::SetUpReply_PreviousExperimentStatus value);
  private:
  ::reconciliation::SetUpReply_PreviousExperimentStatus _internal_status() const;
  void _internal_set_status(::reconciliation::SetUpReply_PreviousExperimentStatus value);
  public:

  // @@protoc_insertion_point(class_scope:reconciliation.SetUpReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reconciliation_2eproto;
};
// -------------------------------------------------------------------

class EstimateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reconciliation.EstimateRequest) */ {
 public:
  inline EstimateRequest() : EstimateRequest(nullptr) {};
  virtual ~EstimateRequest();

  EstimateRequest(const EstimateRequest& from);
  EstimateRequest(EstimateRequest&& from) noexcept
    : EstimateRequest() {
    *this = ::std::move(from);
  }

  inline EstimateRequest& operator=(const EstimateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateRequest& operator=(EstimateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstimateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EstimateRequest* internal_default_instance() {
    return reinterpret_cast<const EstimateRequest*>(
               &_EstimateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EstimateRequest& a, EstimateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateRequest* New() const final {
    return CreateMaybeMessage<EstimateRequest>(nullptr);
  }

  EstimateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstimateRequest& from);
  void MergeFrom(const EstimateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reconciliation.EstimateRequest";
  }
  protected:
  explicit EstimateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_reconciliation_2eproto);
    return ::descriptor_table_reconciliation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSketchesFieldNumber = 1,
  };
  // repeated int32 sketches = 1;
  int sketches_size() const;
  private:
  int _internal_sketches_size() const;
  public:
  void clear_sketches();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sketches(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_sketches() const;
  void _internal_add_sketches(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_sketches();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 sketches(int index) const;
  void set_sketches(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_sketches(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      sketches() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_sketches();

  // @@protoc_insertion_point(class_scope:reconciliation.EstimateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > sketches_;
  mutable std::atomic<int> _sketches_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reconciliation_2eproto;
};
// -------------------------------------------------------------------

class EstimateReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reconciliation.EstimateReply) */ {
 public:
  inline EstimateReply() : EstimateReply(nullptr) {};
  virtual ~EstimateReply();

  EstimateReply(const EstimateReply& from);
  EstimateReply(EstimateReply&& from) noexcept
    : EstimateReply() {
    *this = ::std::move(from);
  }

  inline EstimateReply& operator=(const EstimateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateReply& operator=(EstimateReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstimateReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EstimateReply* internal_default_instance() {
    return reinterpret_cast<const EstimateReply*>(
               &_EstimateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EstimateReply& a, EstimateReply& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateReply* New() const final {
    return CreateMaybeMessage<EstimateReply>(nullptr);
  }

  EstimateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstimateReply& from);
  void MergeFrom(const EstimateReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reconciliation.EstimateReply";
  }
  protected:
  explicit EstimateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_reconciliation_2eproto);
    return ::descriptor_table_reconciliation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstimatedValueFieldNumber = 1,
  };
  // float estimated_value = 1;
  void clear_estimated_value();
  float estimated_value() const;
  void set_estimated_value(float value);
  private:
  float _internal_estimated_value() const;
  void _internal_set_estimated_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:reconciliation.EstimateReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float estimated_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reconciliation_2eproto;
};
// -------------------------------------------------------------------

class PinSketchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reconciliation.PinSketchRequest) */ {
 public:
  inline PinSketchRequest() : PinSketchRequest(nullptr) {};
  virtual ~PinSketchRequest();

  PinSketchRequest(const PinSketchRequest& from);
  PinSketchRequest(PinSketchRequest&& from) noexcept
    : PinSketchRequest() {
    *this = ::std::move(from);
  }

  inline PinSketchRequest& operator=(const PinSketchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PinSketchRequest& operator=(PinSketchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PinSketchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PinSketchRequest* internal_default_instance() {
    return reinterpret_cast<const PinSketchRequest*>(
               &_PinSketchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PinSketchRequest& a, PinSketchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PinSketchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PinSketchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PinSketchRequest* New() const final {
    return CreateMaybeMessage<PinSketchRequest>(nullptr);
  }

  PinSketchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PinSketchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PinSketchRequest& from);
  void MergeFrom(const PinSketchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PinSketchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reconciliation.PinSketchRequest";
  }
  protected:
  explicit PinSketchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_reconciliation_2eproto);
    return ::descriptor_table_reconciliation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSketchFieldNumber = 1,
  };
  // string sketch = 1;
  void clear_sketch();
  const std::string& sketch() const;
  void set_sketch(const std::string& value);
  void set_sketch(std::string&& value);
  void set_sketch(const char* value);
  void set_sketch(const char* value, size_t size);
  std::string* mutable_sketch();
  std::string* release_sketch();
  void set_allocated_sketch(std::string* sketch);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sketch();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sketch(
      std::string* sketch);
  private:
  const std::string& _internal_sketch() const;
  void _internal_set_sketch(const std::string& value);
  std::string* _internal_mutable_sketch();
  public:

  // @@protoc_insertion_point(class_scope:reconciliation.PinSketchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sketch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reconciliation_2eproto;
};
// -------------------------------------------------------------------

class PinSketchReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reconciliation.PinSketchReply) */ {
 public:
  inline PinSketchReply() : PinSketchReply(nullptr) {};
  virtual ~PinSketchReply();

  PinSketchReply(const PinSketchReply& from);
  PinSketchReply(PinSketchReply&& from) noexcept
    : PinSketchReply() {
    *this = ::std::move(from);
  }

  inline PinSketchReply& operator=(const PinSketchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PinSketchReply& operator=(PinSketchReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PinSketchReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PinSketchReply* internal_default_instance() {
    return reinterpret_cast<const PinSketchReply*>(
               &_PinSketchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PinSketchReply& a, PinSketchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PinSketchReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PinSketchReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PinSketchReply* New() const final {
    return CreateMaybeMessage<PinSketchReply>(nullptr);
  }

  PinSketchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PinSketchReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PinSketchReply& from);
  void MergeFrom(const PinSketchReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PinSketchReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reconciliation.PinSketchReply";
  }
  protected:
  explicit PinSketchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_reconciliation_2eproto);
    return ::descriptor_table_reconciliation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissingKeysFieldNumber = 1,
    kPushedKeyValuesFieldNumber = 2,
  };
  // repeated int32 missing_keys = 1;
  int missing_keys_size() const;
  private:
  int _internal_missing_keys_size() const;
  public:
  void clear_missing_keys();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_missing_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_missing_keys() const;
  void _internal_add_missing_keys(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_missing_keys();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 missing_keys(int index) const;
  void set_missing_keys(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_missing_keys(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      missing_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_missing_keys();

  // repeated .reconciliation.KeyValue pushed_key_values = 2;
  int pushed_key_values_size() const;
  private:
  int _internal_pushed_key_values_size() const;
  public:
  void clear_pushed_key_values();
  ::reconciliation::KeyValue* mutable_pushed_key_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >*
      mutable_pushed_key_values();
  private:
  const ::reconciliation::KeyValue& _internal_pushed_key_values(int index) const;
  ::reconciliation::KeyValue* _internal_add_pushed_key_values();
  public:
  const ::reconciliation::KeyValue& pushed_key_values(int index) const;
  ::reconciliation::KeyValue* add_pushed_key_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >&
      pushed_key_values() const;

  // @@protoc_insertion_point(class_scope:reconciliation.PinSketchReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > missing_keys_;
  mutable std::atomic<int> _missing_keys_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue > pushed_key_values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reconciliation_2eproto;
};
// -------------------------------------------------------------------

class PbsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reconciliation.PbsRequest) */ {
 public:
  inline PbsRequest() : PbsRequest(nullptr) {};
  virtual ~PbsRequest();

  PbsRequest(const PbsRequest& from);
  PbsRequest(PbsRequest&& from) noexcept
    : PbsRequest() {
    *this = ::std::move(from);
  }

  inline PbsRequest& operator=(const PbsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbsRequest& operator=(PbsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PbsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbsRequest* internal_default_instance() {
    return reinterpret_cast<const PbsRequest*>(
               &_PbsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PbsRequest& a, PbsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PbsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbsRequest* New() const final {
    return CreateMaybeMessage<PbsRequest>(nullptr);
  }

  PbsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PbsRequest& from);
  void MergeFrom(const PbsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reconciliation.PbsRequest";
  }
  protected:
  explicit PbsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_reconciliation_2eproto);
    return ::descriptor_table_reconciliation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPushedKeyValuesFieldNumber = 3,
    kMissingKeysFieldNumber = 4,
    kEncodingMsgFieldNumber = 1,
    kEncodingHintFieldNumber = 2,
  };
  // repeated .reconciliation.KeyValue pushed_key_values = 3;
  int pushed_key_values_size() const;
  private:
  int _internal_pushed_key_values_size() const;
  public:
  void clear_pushed_key_values();
  ::reconciliation::KeyValue* mutable_pushed_key_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >*
      mutable_pushed_key_values();
  private:
  const ::reconciliation::KeyValue& _internal_pushed_key_values(int index) const;
  ::reconciliation::KeyValue* _internal_add_pushed_key_values();
  public:
  const ::reconciliation::KeyValue& pushed_key_values(int index) const;
  ::reconciliation::KeyValue* add_pushed_key_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >&
      pushed_key_values() const;

  // repeated uint32 missing_keys = 4;
  int missing_keys_size() const;
  private:
  int _internal_missing_keys_size() const;
  public:
  void clear_missing_keys();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_missing_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_missing_keys() const;
  void _internal_add_missing_keys(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_missing_keys();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 missing_keys(int index) const;
  void set_missing_keys(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_missing_keys(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      missing_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_missing_keys();

  // bytes encoding_msg = 1;
  void clear_encoding_msg();
  const std::string& encoding_msg() const;
  void set_encoding_msg(const std::string& value);
  void set_encoding_msg(std::string&& value);
  void set_encoding_msg(const char* value);
  void set_encoding_msg(const void* value, size_t size);
  std::string* mutable_encoding_msg();
  std::string* release_encoding_msg();
  void set_allocated_encoding_msg(std::string* encoding_msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_encoding_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_encoding_msg(
      std::string* encoding_msg);
  private:
  const std::string& _internal_encoding_msg() const;
  void _internal_set_encoding_msg(const std::string& value);
  std::string* _internal_mutable_encoding_msg();
  public:

  // bytes encoding_hint = 2;
  void clear_encoding_hint();
  const std::string& encoding_hint() const;
  void set_encoding_hint(const std::string& value);
  void set_encoding_hint(std::string&& value);
  void set_encoding_hint(const char* value);
  void set_encoding_hint(const void* value, size_t size);
  std::string* mutable_encoding_hint();
  std::string* release_encoding_hint();
  void set_allocated_encoding_hint(std::string* encoding_hint);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_encoding_hint();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_encoding_hint(
      std::string* encoding_hint);
  private:
  const std::string& _internal_encoding_hint() const;
  void _internal_set_encoding_hint(const std::string& value);
  std::string* _internal_mutable_encoding_hint();
  public:

  // @@protoc_insertion_point(class_scope:reconciliation.PbsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue > pushed_key_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > missing_keys_;
  mutable std::atomic<int> _missing_keys_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoding_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoding_hint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reconciliation_2eproto;
};
// -------------------------------------------------------------------

class PbsReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reconciliation.PbsReply) */ {
 public:
  inline PbsReply() : PbsReply(nullptr) {};
  virtual ~PbsReply();

  PbsReply(const PbsReply& from);
  PbsReply(PbsReply&& from) noexcept
    : PbsReply() {
    *this = ::std::move(from);
  }

  inline PbsReply& operator=(const PbsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbsReply& operator=(PbsReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PbsReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbsReply* internal_default_instance() {
    return reinterpret_cast<const PbsReply*>(
               &_PbsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PbsReply& a, PbsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PbsReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbsReply* New() const final {
    return CreateMaybeMessage<PbsReply>(nullptr);
  }

  PbsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PbsReply& from);
  void MergeFrom(const PbsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reconciliation.PbsReply";
  }
  protected:
  explicit PbsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_reconciliation_2eproto);
    return ::descriptor_table_reconciliation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXorsFieldNumber = 2,
    kChecksumFieldNumber = 3,
    kPushedKeyValuesFieldNumber = 4,
    kDecodingMsgFieldNumber = 1,
  };
  // repeated uint32 xors = 2;
  int xors_size() const;
  private:
  int _internal_xors_size() const;
  public:
  void clear_xors();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_xors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_xors() const;
  void _internal_add_xors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_xors();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 xors(int index) const;
  void set_xors(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_xors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      xors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_xors();

  // repeated uint32 checksum = 3;
  int checksum_size() const;
  private:
  int _internal_checksum_size() const;
  public:
  void clear_checksum();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_checksum(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_checksum() const;
  void _internal_add_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_checksum();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 checksum(int index) const;
  void set_checksum(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      checksum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_checksum();

  // repeated .reconciliation.KeyValue pushed_key_values = 4;
  int pushed_key_values_size() const;
  private:
  int _internal_pushed_key_values_size() const;
  public:
  void clear_pushed_key_values();
  ::reconciliation::KeyValue* mutable_pushed_key_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >*
      mutable_pushed_key_values();
  private:
  const ::reconciliation::KeyValue& _internal_pushed_key_values(int index) const;
  ::reconciliation::KeyValue* _internal_add_pushed_key_values();
  public:
  const ::reconciliation::KeyValue& pushed_key_values(int index) const;
  ::reconciliation::KeyValue* add_pushed_key_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >&
      pushed_key_values() const;

  // bytes decoding_msg = 1;
  void clear_decoding_msg();
  const std::string& decoding_msg() const;
  void set_decoding_msg(const std::string& value);
  void set_decoding_msg(std::string&& value);
  void set_decoding_msg(const char* value);
  void set_decoding_msg(const void* value, size_t size);
  std::string* mutable_decoding_msg();
  std::string* release_decoding_msg();
  void set_allocated_decoding_msg(std::string* decoding_msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_decoding_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_decoding_msg(
      std::string* decoding_msg);
  private:
  const std::string& _internal_decoding_msg() const;
  void _internal_set_decoding_msg(const std::string& value);
  std::string* _internal_mutable_decoding_msg();
  public:

  // @@protoc_insertion_point(class_scope:reconciliation.PbsReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > xors_;
  mutable std::atomic<int> _xors_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > checksum_;
  mutable std::atomic<int> _checksum_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue > pushed_key_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decoding_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reconciliation_2eproto;
};
// -------------------------------------------------------------------

class IbfCell PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reconciliation.IbfCell) */ {
 public:
  inline IbfCell() : IbfCell(nullptr) {};
  virtual ~IbfCell();

  IbfCell(const IbfCell& from);
  IbfCell(IbfCell&& from) noexcept
    : IbfCell() {
    *this = ::std::move(from);
  }

  inline IbfCell& operator=(const IbfCell& from) {
    CopyFrom(from);
    return *this;
  }
  inline IbfCell& operator=(IbfCell&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IbfCell& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IbfCell* internal_default_instance() {
    return reinterpret_cast<const IbfCell*>(
               &_IbfCell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IbfCell& a, IbfCell& b) {
    a.Swap(&b);
  }
  inline void Swap(IbfCell* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IbfCell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IbfCell* New() const final {
    return CreateMaybeMessage<IbfCell>(nullptr);
  }

  IbfCell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IbfCell>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IbfCell& from);
  void MergeFrom(const IbfCell& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IbfCell* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reconciliation.IbfCell";
  }
  protected:
  explicit IbfCell(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_reconciliation_2eproto);
    return ::descriptor_table_reconciliation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeySumFieldNumber = 2,
    kCountFieldNumber = 1,
    kKeyCheckFieldNumber = 3,
  };
  // uint64 keySum = 2;
  void clear_keysum();
  ::PROTOBUF_NAMESPACE_ID::uint64 keysum() const;
  void set_keysum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_keysum() const;
  void _internal_set_keysum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 count = 1;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 keyCheck = 3;
  void clear_keycheck();
  ::PROTOBUF_NAMESPACE_ID::uint32 keycheck() const;
  void set_keycheck(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_keycheck() const;
  void _internal_set_keycheck(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:reconciliation.IbfCell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 keysum_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 keycheck_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reconciliation_2eproto;
};
// -------------------------------------------------------------------

class DDigestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reconciliation.DDigestRequest) */ {
 public:
  inline DDigestRequest() : DDigestRequest(nullptr) {};
  virtual ~DDigestRequest();

  DDigestRequest(const DDigestRequest& from);
  DDigestRequest(DDigestRequest&& from) noexcept
    : DDigestRequest() {
    *this = ::std::move(from);
  }

  inline DDigestRequest& operator=(const DDigestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DDigestRequest& operator=(DDigestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DDigestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DDigestRequest* internal_default_instance() {
    return reinterpret_cast<const DDigestRequest*>(
               &_DDigestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DDigestRequest& a, DDigestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DDigestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DDigestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DDigestRequest* New() const final {
    return CreateMaybeMessage<DDigestRequest>(nullptr);
  }

  DDigestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DDigestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DDigestRequest& from);
  void MergeFrom(const DDigestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DDigestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reconciliation.DDigestRequest";
  }
  protected:
  explicit DDigestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_reconciliation_2eproto);
    return ::descriptor_table_reconciliation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 1,
  };
  // repeated .reconciliation.IbfCell cells = 1;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::reconciliation::IbfCell* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::IbfCell >*
      mutable_cells();
  private:
  const ::reconciliation::IbfCell& _internal_cells(int index) const;
  ::reconciliation::IbfCell* _internal_add_cells();
  public:
  const ::reconciliation::IbfCell& cells(int index) const;
  ::reconciliation::IbfCell* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::IbfCell >&
      cells() const;

  // @@protoc_insertion_point(class_scope:reconciliation.DDigestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::IbfCell > cells_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reconciliation_2eproto;
};
// -------------------------------------------------------------------

class DDigestReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reconciliation.DDigestReply) */ {
 public:
  inline DDigestReply() : DDigestReply(nullptr) {};
  virtual ~DDigestReply();

  DDigestReply(const DDigestReply& from);
  DDigestReply(DDigestReply&& from) noexcept
    : DDigestReply() {
    *this = ::std::move(from);
  }

  inline DDigestReply& operator=(const DDigestReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DDigestReply& operator=(DDigestReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DDigestReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DDigestReply* internal_default_instance() {
    return reinterpret_cast<const DDigestReply*>(
               &_DDigestReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DDigestReply& a, DDigestReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DDigestReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DDigestReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DDigestReply* New() const final {
    return CreateMaybeMessage<DDigestReply>(nullptr);
  }

  DDigestReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DDigestReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DDigestReply& from);
  void MergeFrom(const DDigestReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DDigestReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reconciliation.DDigestReply";
  }
  protected:
  explicit DDigestReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_reconciliation_2eproto);
    return ::descriptor_table_reconciliation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissingKeysFieldNumber = 2,
    kPushedKeyValuesFieldNumber = 3,
    kSucceedFieldNumber = 1,
  };
  // repeated int32 missing_keys = 2;
  int missing_keys_size() const;
  private:
  int _internal_missing_keys_size() const;
  public:
  void clear_missing_keys();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_missing_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_missing_keys() const;
  void _internal_add_missing_keys(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_missing_keys();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 missing_keys(int index) const;
  void set_missing_keys(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_missing_keys(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      missing_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_missing_keys();

  // repeated .reconciliation.KeyValue pushed_key_values = 3;
  int pushed_key_values_size() const;
  private:
  int _internal_pushed_key_values_size() const;
  public:
  void clear_pushed_key_values();
  ::reconciliation::KeyValue* mutable_pushed_key_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >*
      mutable_pushed_key_values();
  private:
  const ::reconciliation::KeyValue& _internal_pushed_key_values(int index) const;
  ::reconciliation::KeyValue* _internal_add_pushed_key_values();
  public:
  const ::reconciliation::KeyValue& pushed_key_values(int index) const;
  ::reconciliation::KeyValue* add_pushed_key_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >&
      pushed_key_values() const;

  // bool succeed = 1;
  void clear_succeed();
  bool succeed() const;
  void set_succeed(bool value);
  private:
  bool _internal_succeed() const;
  void _internal_set_succeed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:reconciliation.DDigestReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > missing_keys_;
  mutable std::atomic<int> _missing_keys_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue > pushed_key_values_;
  bool succeed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reconciliation_2eproto;
};
// -------------------------------------------------------------------

class GrapheneRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reconciliation.GrapheneRequest) */ {
 public:
  inline GrapheneRequest() : GrapheneRequest(nullptr) {};
  virtual ~GrapheneRequest();

  GrapheneRequest(const GrapheneRequest& from);
  GrapheneRequest(GrapheneRequest&& from) noexcept
    : GrapheneRequest() {
    *this = ::std::move(from);
  }

  inline GrapheneRequest& operator=(const GrapheneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrapheneRequest& operator=(GrapheneRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GrapheneRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GrapheneRequest* internal_default_instance() {
    return reinterpret_cast<const GrapheneRequest*>(
               &_GrapheneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GrapheneRequest& a, GrapheneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GrapheneRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrapheneRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GrapheneRequest* New() const final {
    return CreateMaybeMessage<GrapheneRequest>(nullptr);
  }

  GrapheneRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GrapheneRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GrapheneRequest& from);
  void MergeFrom(const GrapheneRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrapheneRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reconciliation.GrapheneRequest";
  }
  protected:
  explicit GrapheneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_reconciliation_2eproto);
    return ::descriptor_table_reconciliation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFieldNumber = 1,
  };
  // uint32 m = 1;
  void clear_m();
  ::PROTOBUF_NAMESPACE_ID::uint32 m() const;
  void set_m(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_m() const;
  void _internal_set_m(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:reconciliation.GrapheneRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reconciliation_2eproto;
};
// -------------------------------------------------------------------

class GrapheneReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reconciliation.GrapheneReply) */ {
 public:
  inline GrapheneReply() : GrapheneReply(nullptr) {};
  virtual ~GrapheneReply();

  GrapheneReply(const GrapheneReply& from);
  GrapheneReply(GrapheneReply&& from) noexcept
    : GrapheneReply() {
    *this = ::std::move(from);
  }

  inline GrapheneReply& operator=(const GrapheneReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrapheneReply& operator=(GrapheneReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GrapheneReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GrapheneReply* internal_default_instance() {
    return reinterpret_cast<const GrapheneReply*>(
               &_GrapheneReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GrapheneReply& a, GrapheneReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GrapheneReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrapheneReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GrapheneReply* New() const final {
    return CreateMaybeMessage<GrapheneReply>(nullptr);
  }

  GrapheneReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GrapheneReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GrapheneReply& from);
  void MergeFrom(const GrapheneReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrapheneReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reconciliation.GrapheneReply";
  }
  protected:
  explicit GrapheneReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_reconciliation_2eproto);
    return ::descriptor_table_reconciliation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIbfFieldNumber = 5,
    kBfFieldNumber = 4,
    kAFieldNumber = 1,
    kNFieldNumber = 2,
    kFprFieldNumber = 3,
  };
  // repeated .reconciliation.IbfCell ibf = 5;
  int ibf_size() const;
  private:
  int _internal_ibf_size() const;
  public:
  void clear_ibf();
  ::reconciliation::IbfCell* mutable_ibf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::IbfCell >*
      mutable_ibf();
  private:
  const ::reconciliation::IbfCell& _internal_ibf(int index) const;
  ::reconciliation::IbfCell* _internal_add_ibf();
  public:
  const ::reconciliation::IbfCell& ibf(int index) const;
  ::reconciliation::IbfCell* add_ibf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::IbfCell >&
      ibf() const;

  // bytes bf = 4;
  void clear_bf();
  const std::string& bf() const;
  void set_bf(const std::string& value);
  void set_bf(std::string&& value);
  void set_bf(const char* value);
  void set_bf(const void* value, size_t size);
  std::string* mutable_bf();
  std::string* release_bf();
  void set_allocated_bf(std::string* bf);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bf();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bf(
      std::string* bf);
  private:
  const std::string& _internal_bf() const;
  void _internal_set_bf(const std::string& value);
  std::string* _internal_mutable_bf();
  public:

  // uint32 a = 1;
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::uint32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 n = 2;
  void clear_n();
  ::PROTOBUF_NAMESPACE_ID::uint32 n() const;
  void set_n(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n() const;
  void _internal_set_n(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double fpr = 3;
  void clear_fpr();
  double fpr() const;
  void set_fpr(double value);
  private:
  double _internal_fpr() const;
  void _internal_set_fpr(double value);
  public:

  // @@protoc_insertion_point(class_scope:reconciliation.GrapheneReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::IbfCell > ibf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bf_;
  ::PROTOBUF_NAMESPACE_ID::uint32 a_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_;
  double fpr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reconciliation_2eproto;
};
// -------------------------------------------------------------------

class KeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reconciliation.KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {};
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const final {
    return CreateMaybeMessage<KeyValue>(nullptr);
  }

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reconciliation.KeyValue";
  }
  protected:
  explicit KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_reconciliation_2eproto);
    return ::descriptor_table_reconciliation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::int32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:reconciliation.KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reconciliation_2eproto;
};
// -------------------------------------------------------------------

class SynchronizeMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reconciliation.SynchronizeMessage) */ {
 public:
  inline SynchronizeMessage() : SynchronizeMessage(nullptr) {};
  virtual ~SynchronizeMessage();

  SynchronizeMessage(const SynchronizeMessage& from);
  SynchronizeMessage(SynchronizeMessage&& from) noexcept
    : SynchronizeMessage() {
    *this = ::std::move(from);
  }

  inline SynchronizeMessage& operator=(const SynchronizeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynchronizeMessage& operator=(SynchronizeMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SynchronizeMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SynchronizeMessage* internal_default_instance() {
    return reinterpret_cast<const SynchronizeMessage*>(
               &_SynchronizeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SynchronizeMessage& a, SynchronizeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SynchronizeMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynchronizeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SynchronizeMessage* New() const final {
    return CreateMaybeMessage<SynchronizeMessage>(nullptr);
  }

  SynchronizeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SynchronizeMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SynchronizeMessage& from);
  void MergeFrom(const SynchronizeMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynchronizeMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reconciliation.SynchronizeMessage";
  }
  protected:
  explicit SynchronizeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_reconciliation_2eproto);
    return ::descriptor_table_reconciliation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPushesFieldNumber = 1,
    kPullsFieldNumber = 2,
  };
  // repeated .reconciliation.KeyValue pushes = 1;
  int pushes_size() const;
  private:
  int _internal_pushes_size() const;
  public:
  void clear_pushes();
  ::reconciliation::KeyValue* mutable_pushes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >*
      mutable_pushes();
  private:
  const ::reconciliation::KeyValue& _internal_pushes(int index) const;
  ::reconciliation::KeyValue* _internal_add_pushes();
  public:
  const ::reconciliation::KeyValue& pushes(int index) const;
  ::reconciliation::KeyValue* add_pushes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >&
      pushes() const;

  // repeated int32 pulls = 2;
  int pulls_size() const;
  private:
  int _internal_pulls_size() const;
  public:
  void clear_pulls();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pulls(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pulls() const;
  void _internal_add_pulls(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pulls();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pulls(int index) const;
  void set_pulls(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pulls(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pulls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pulls();

  // @@protoc_insertion_point(class_scope:reconciliation.SynchronizeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue > pushes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pulls_;
  mutable std::atomic<int> _pulls_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reconciliation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetUpRequest

// .reconciliation.SetUpRequest.Method next_algorithm = 1;
inline void SetUpRequest::clear_next_algorithm() {
  next_algorithm_ = 0;
}
inline ::reconciliation::SetUpRequest_Method SetUpRequest::_internal_next_algorithm() const {
  return static_cast< ::reconciliation::SetUpRequest_Method >(next_algorithm_);
}
inline ::reconciliation::SetUpRequest_Method SetUpRequest::next_algorithm() const {
  // @@protoc_insertion_point(field_get:reconciliation.SetUpRequest.next_algorithm)
  return _internal_next_algorithm();
}
inline void SetUpRequest::_internal_set_next_algorithm(::reconciliation::SetUpRequest_Method value) {
  
  next_algorithm_ = value;
}
inline void SetUpRequest::set_next_algorithm(::reconciliation::SetUpRequest_Method value) {
  _internal_set_next_algorithm(value);
  // @@protoc_insertion_point(field_set:reconciliation.SetUpRequest.next_algorithm)
}

// uint32 seed = 2;
inline void SetUpRequest::clear_seed() {
  seed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetUpRequest::_internal_seed() const {
  return seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetUpRequest::seed() const {
  // @@protoc_insertion_point(field_get:reconciliation.SetUpRequest.seed)
  return _internal_seed();
}
inline void SetUpRequest::_internal_set_seed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seed_ = value;
}
inline void SetUpRequest::set_seed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:reconciliation.SetUpRequest.seed)
}

// uint32 d = 3;
inline void SetUpRequest::clear_d() {
  d_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetUpRequest::_internal_d() const {
  return d_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetUpRequest::d() const {
  // @@protoc_insertion_point(field_get:reconciliation.SetUpRequest.d)
  return _internal_d();
}
inline void SetUpRequest::_internal_set_d(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  d_ = value;
}
inline void SetUpRequest::set_d(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:reconciliation.SetUpRequest.d)
}

// uint32 object_sz = 4;
inline void SetUpRequest::clear_object_sz() {
  object_sz_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetUpRequest::_internal_object_sz() const {
  return object_sz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetUpRequest::object_sz() const {
  // @@protoc_insertion_point(field_get:reconciliation.SetUpRequest.object_sz)
  return _internal_object_sz();
}
inline void SetUpRequest::_internal_set_object_sz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  object_sz_ = value;
}
inline void SetUpRequest::set_object_sz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_object_sz(value);
  // @@protoc_insertion_point(field_set:reconciliation.SetUpRequest.object_sz)
}

// uint32 usz = 5;
inline void SetUpRequest::clear_usz() {
  usz_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetUpRequest::_internal_usz() const {
  return usz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetUpRequest::usz() const {
  // @@protoc_insertion_point(field_get:reconciliation.SetUpRequest.usz)
  return _internal_usz();
}
inline void SetUpRequest::_internal_set_usz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  usz_ = value;
}
inline void SetUpRequest::set_usz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usz(value);
  // @@protoc_insertion_point(field_set:reconciliation.SetUpRequest.usz)
}

// -------------------------------------------------------------------

// SetUpReply

// .reconciliation.SetUpReply.PreviousExperimentStatus status = 1;
inline void SetUpReply::clear_status() {
  status_ = 0;
}
inline ::reconciliation::SetUpReply_PreviousExperimentStatus SetUpReply::_internal_status() const {
  return static_cast< ::reconciliation::SetUpReply_PreviousExperimentStatus >(status_);
}
inline ::reconciliation::SetUpReply_PreviousExperimentStatus SetUpReply::status() const {
  // @@protoc_insertion_point(field_get:reconciliation.SetUpReply.status)
  return _internal_status();
}
inline void SetUpReply::_internal_set_status(::reconciliation::SetUpReply_PreviousExperimentStatus value) {
  
  status_ = value;
}
inline void SetUpReply::set_status(::reconciliation::SetUpReply_PreviousExperimentStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:reconciliation.SetUpReply.status)
}

// -------------------------------------------------------------------

// EstimateRequest

// repeated int32 sketches = 1;
inline int EstimateRequest::_internal_sketches_size() const {
  return sketches_.size();
}
inline int EstimateRequest::sketches_size() const {
  return _internal_sketches_size();
}
inline void EstimateRequest::clear_sketches() {
  sketches_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EstimateRequest::_internal_sketches(int index) const {
  return sketches_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EstimateRequest::sketches(int index) const {
  // @@protoc_insertion_point(field_get:reconciliation.EstimateRequest.sketches)
  return _internal_sketches(index);
}
inline void EstimateRequest::set_sketches(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  sketches_.Set(index, value);
  // @@protoc_insertion_point(field_set:reconciliation.EstimateRequest.sketches)
}
inline void EstimateRequest::_internal_add_sketches(::PROTOBUF_NAMESPACE_ID::int32 value) {
  sketches_.Add(value);
}
inline void EstimateRequest::add_sketches(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_sketches(value);
  // @@protoc_insertion_point(field_add:reconciliation.EstimateRequest.sketches)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EstimateRequest::_internal_sketches() const {
  return sketches_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EstimateRequest::sketches() const {
  // @@protoc_insertion_point(field_list:reconciliation.EstimateRequest.sketches)
  return _internal_sketches();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EstimateRequest::_internal_mutable_sketches() {
  return &sketches_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EstimateRequest::mutable_sketches() {
  // @@protoc_insertion_point(field_mutable_list:reconciliation.EstimateRequest.sketches)
  return _internal_mutable_sketches();
}

// -------------------------------------------------------------------

// EstimateReply

// float estimated_value = 1;
inline void EstimateReply::clear_estimated_value() {
  estimated_value_ = 0;
}
inline float EstimateReply::_internal_estimated_value() const {
  return estimated_value_;
}
inline float EstimateReply::estimated_value() const {
  // @@protoc_insertion_point(field_get:reconciliation.EstimateReply.estimated_value)
  return _internal_estimated_value();
}
inline void EstimateReply::_internal_set_estimated_value(float value) {
  
  estimated_value_ = value;
}
inline void EstimateReply::set_estimated_value(float value) {
  _internal_set_estimated_value(value);
  // @@protoc_insertion_point(field_set:reconciliation.EstimateReply.estimated_value)
}

// -------------------------------------------------------------------

// PinSketchRequest

// string sketch = 1;
inline void PinSketchRequest::clear_sketch() {
  sketch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PinSketchRequest::sketch() const {
  // @@protoc_insertion_point(field_get:reconciliation.PinSketchRequest.sketch)
  return _internal_sketch();
}
inline void PinSketchRequest::set_sketch(const std::string& value) {
  _internal_set_sketch(value);
  // @@protoc_insertion_point(field_set:reconciliation.PinSketchRequest.sketch)
}
inline std::string* PinSketchRequest::mutable_sketch() {
  // @@protoc_insertion_point(field_mutable:reconciliation.PinSketchRequest.sketch)
  return _internal_mutable_sketch();
}
inline const std::string& PinSketchRequest::_internal_sketch() const {
  return sketch_.Get();
}
inline void PinSketchRequest::_internal_set_sketch(const std::string& value) {
  
  sketch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PinSketchRequest::set_sketch(std::string&& value) {
  
  sketch_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:reconciliation.PinSketchRequest.sketch)
}
inline void PinSketchRequest::set_sketch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sketch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:reconciliation.PinSketchRequest.sketch)
}
inline void PinSketchRequest::set_sketch(const char* value,
    size_t size) {
  
  sketch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:reconciliation.PinSketchRequest.sketch)
}
inline std::string* PinSketchRequest::_internal_mutable_sketch() {
  
  return sketch_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PinSketchRequest::release_sketch() {
  // @@protoc_insertion_point(field_release:reconciliation.PinSketchRequest.sketch)
  return sketch_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PinSketchRequest::set_allocated_sketch(std::string* sketch) {
  if (sketch != nullptr) {
    
  } else {
    
  }
  sketch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sketch,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:reconciliation.PinSketchRequest.sketch)
}
inline std::string* PinSketchRequest::unsafe_arena_release_sketch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:reconciliation.PinSketchRequest.sketch)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sketch_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PinSketchRequest::unsafe_arena_set_allocated_sketch(
    std::string* sketch) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sketch != nullptr) {
    
  } else {
    
  }
  sketch_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sketch, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reconciliation.PinSketchRequest.sketch)
}

// -------------------------------------------------------------------

// PinSketchReply

// repeated int32 missing_keys = 1;
inline int PinSketchReply::_internal_missing_keys_size() const {
  return missing_keys_.size();
}
inline int PinSketchReply::missing_keys_size() const {
  return _internal_missing_keys_size();
}
inline void PinSketchReply::clear_missing_keys() {
  missing_keys_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PinSketchReply::_internal_missing_keys(int index) const {
  return missing_keys_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PinSketchReply::missing_keys(int index) const {
  // @@protoc_insertion_point(field_get:reconciliation.PinSketchReply.missing_keys)
  return _internal_missing_keys(index);
}
inline void PinSketchReply::set_missing_keys(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  missing_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:reconciliation.PinSketchReply.missing_keys)
}
inline void PinSketchReply::_internal_add_missing_keys(::PROTOBUF_NAMESPACE_ID::int32 value) {
  missing_keys_.Add(value);
}
inline void PinSketchReply::add_missing_keys(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_missing_keys(value);
  // @@protoc_insertion_point(field_add:reconciliation.PinSketchReply.missing_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PinSketchReply::_internal_missing_keys() const {
  return missing_keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PinSketchReply::missing_keys() const {
  // @@protoc_insertion_point(field_list:reconciliation.PinSketchReply.missing_keys)
  return _internal_missing_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PinSketchReply::_internal_mutable_missing_keys() {
  return &missing_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PinSketchReply::mutable_missing_keys() {
  // @@protoc_insertion_point(field_mutable_list:reconciliation.PinSketchReply.missing_keys)
  return _internal_mutable_missing_keys();
}

// repeated .reconciliation.KeyValue pushed_key_values = 2;
inline int PinSketchReply::_internal_pushed_key_values_size() const {
  return pushed_key_values_.size();
}
inline int PinSketchReply::pushed_key_values_size() const {
  return _internal_pushed_key_values_size();
}
inline void PinSketchReply::clear_pushed_key_values() {
  pushed_key_values_.Clear();
}
inline ::reconciliation::KeyValue* PinSketchReply::mutable_pushed_key_values(int index) {
  // @@protoc_insertion_point(field_mutable:reconciliation.PinSketchReply.pushed_key_values)
  return pushed_key_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >*
PinSketchReply::mutable_pushed_key_values() {
  // @@protoc_insertion_point(field_mutable_list:reconciliation.PinSketchReply.pushed_key_values)
  return &pushed_key_values_;
}
inline const ::reconciliation::KeyValue& PinSketchReply::_internal_pushed_key_values(int index) const {
  return pushed_key_values_.Get(index);
}
inline const ::reconciliation::KeyValue& PinSketchReply::pushed_key_values(int index) const {
  // @@protoc_insertion_point(field_get:reconciliation.PinSketchReply.pushed_key_values)
  return _internal_pushed_key_values(index);
}
inline ::reconciliation::KeyValue* PinSketchReply::_internal_add_pushed_key_values() {
  return pushed_key_values_.Add();
}
inline ::reconciliation::KeyValue* PinSketchReply::add_pushed_key_values() {
  // @@protoc_insertion_point(field_add:reconciliation.PinSketchReply.pushed_key_values)
  return _internal_add_pushed_key_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >&
PinSketchReply::pushed_key_values() const {
  // @@protoc_insertion_point(field_list:reconciliation.PinSketchReply.pushed_key_values)
  return pushed_key_values_;
}

// -------------------------------------------------------------------

// PbsRequest

// bytes encoding_msg = 1;
inline void PbsRequest::clear_encoding_msg() {
  encoding_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PbsRequest::encoding_msg() const {
  // @@protoc_insertion_point(field_get:reconciliation.PbsRequest.encoding_msg)
  return _internal_encoding_msg();
}
inline void PbsRequest::set_encoding_msg(const std::string& value) {
  _internal_set_encoding_msg(value);
  // @@protoc_insertion_point(field_set:reconciliation.PbsRequest.encoding_msg)
}
inline std::string* PbsRequest::mutable_encoding_msg() {
  // @@protoc_insertion_point(field_mutable:reconciliation.PbsRequest.encoding_msg)
  return _internal_mutable_encoding_msg();
}
inline const std::string& PbsRequest::_internal_encoding_msg() const {
  return encoding_msg_.Get();
}
inline void PbsRequest::_internal_set_encoding_msg(const std::string& value) {
  
  encoding_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PbsRequest::set_encoding_msg(std::string&& value) {
  
  encoding_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:reconciliation.PbsRequest.encoding_msg)
}
inline void PbsRequest::set_encoding_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoding_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:reconciliation.PbsRequest.encoding_msg)
}
inline void PbsRequest::set_encoding_msg(const void* value,
    size_t size) {
  
  encoding_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:reconciliation.PbsRequest.encoding_msg)
}
inline std::string* PbsRequest::_internal_mutable_encoding_msg() {
  
  return encoding_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PbsRequest::release_encoding_msg() {
  // @@protoc_insertion_point(field_release:reconciliation.PbsRequest.encoding_msg)
  return encoding_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PbsRequest::set_allocated_encoding_msg(std::string* encoding_msg) {
  if (encoding_msg != nullptr) {
    
  } else {
    
  }
  encoding_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoding_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:reconciliation.PbsRequest.encoding_msg)
}
inline std::string* PbsRequest::unsafe_arena_release_encoding_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:reconciliation.PbsRequest.encoding_msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return encoding_msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PbsRequest::unsafe_arena_set_allocated_encoding_msg(
    std::string* encoding_msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (encoding_msg != nullptr) {
    
  } else {
    
  }
  encoding_msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      encoding_msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reconciliation.PbsRequest.encoding_msg)
}

// bytes encoding_hint = 2;
inline void PbsRequest::clear_encoding_hint() {
  encoding_hint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PbsRequest::encoding_hint() const {
  // @@protoc_insertion_point(field_get:reconciliation.PbsRequest.encoding_hint)
  return _internal_encoding_hint();
}
inline void PbsRequest::set_encoding_hint(const std::string& value) {
  _internal_set_encoding_hint(value);
  // @@protoc_insertion_point(field_set:reconciliation.PbsRequest.encoding_hint)
}
inline std::string* PbsRequest::mutable_encoding_hint() {
  // @@protoc_insertion_point(field_mutable:reconciliation.PbsRequest.encoding_hint)
  return _internal_mutable_encoding_hint();
}
inline const std::string& PbsRequest::_internal_encoding_hint() const {
  return encoding_hint_.Get();
}
inline void PbsRequest::_internal_set_encoding_hint(const std::string& value) {
  
  encoding_hint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PbsRequest::set_encoding_hint(std::string&& value) {
  
  encoding_hint_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:reconciliation.PbsRequest.encoding_hint)
}
inline void PbsRequest::set_encoding_hint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoding_hint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:reconciliation.PbsRequest.encoding_hint)
}
inline void PbsRequest::set_encoding_hint(const void* value,
    size_t size) {
  
  encoding_hint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:reconciliation.PbsRequest.encoding_hint)
}
inline std::string* PbsRequest::_internal_mutable_encoding_hint() {
  
  return encoding_hint_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PbsRequest::release_encoding_hint() {
  // @@protoc_insertion_point(field_release:reconciliation.PbsRequest.encoding_hint)
  return encoding_hint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PbsRequest::set_allocated_encoding_hint(std::string* encoding_hint) {
  if (encoding_hint != nullptr) {
    
  } else {
    
  }
  encoding_hint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoding_hint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:reconciliation.PbsRequest.encoding_hint)
}
inline std::string* PbsRequest::unsafe_arena_release_encoding_hint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:reconciliation.PbsRequest.encoding_hint)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return encoding_hint_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PbsRequest::unsafe_arena_set_allocated_encoding_hint(
    std::string* encoding_hint) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (encoding_hint != nullptr) {
    
  } else {
    
  }
  encoding_hint_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      encoding_hint, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reconciliation.PbsRequest.encoding_hint)
}

// repeated .reconciliation.KeyValue pushed_key_values = 3;
inline int PbsRequest::_internal_pushed_key_values_size() const {
  return pushed_key_values_.size();
}
inline int PbsRequest::pushed_key_values_size() const {
  return _internal_pushed_key_values_size();
}
inline void PbsRequest::clear_pushed_key_values() {
  pushed_key_values_.Clear();
}
inline ::reconciliation::KeyValue* PbsRequest::mutable_pushed_key_values(int index) {
  // @@protoc_insertion_point(field_mutable:reconciliation.PbsRequest.pushed_key_values)
  return pushed_key_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >*
PbsRequest::mutable_pushed_key_values() {
  // @@protoc_insertion_point(field_mutable_list:reconciliation.PbsRequest.pushed_key_values)
  return &pushed_key_values_;
}
inline const ::reconciliation::KeyValue& PbsRequest::_internal_pushed_key_values(int index) const {
  return pushed_key_values_.Get(index);
}
inline const ::reconciliation::KeyValue& PbsRequest::pushed_key_values(int index) const {
  // @@protoc_insertion_point(field_get:reconciliation.PbsRequest.pushed_key_values)
  return _internal_pushed_key_values(index);
}
inline ::reconciliation::KeyValue* PbsRequest::_internal_add_pushed_key_values() {
  return pushed_key_values_.Add();
}
inline ::reconciliation::KeyValue* PbsRequest::add_pushed_key_values() {
  // @@protoc_insertion_point(field_add:reconciliation.PbsRequest.pushed_key_values)
  return _internal_add_pushed_key_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >&
PbsRequest::pushed_key_values() const {
  // @@protoc_insertion_point(field_list:reconciliation.PbsRequest.pushed_key_values)
  return pushed_key_values_;
}

// repeated uint32 missing_keys = 4;
inline int PbsRequest::_internal_missing_keys_size() const {
  return missing_keys_.size();
}
inline int PbsRequest::missing_keys_size() const {
  return _internal_missing_keys_size();
}
inline void PbsRequest::clear_missing_keys() {
  missing_keys_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PbsRequest::_internal_missing_keys(int index) const {
  return missing_keys_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PbsRequest::missing_keys(int index) const {
  // @@protoc_insertion_point(field_get:reconciliation.PbsRequest.missing_keys)
  return _internal_missing_keys(index);
}
inline void PbsRequest::set_missing_keys(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  missing_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:reconciliation.PbsRequest.missing_keys)
}
inline void PbsRequest::_internal_add_missing_keys(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  missing_keys_.Add(value);
}
inline void PbsRequest::add_missing_keys(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_missing_keys(value);
  // @@protoc_insertion_point(field_add:reconciliation.PbsRequest.missing_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PbsRequest::_internal_missing_keys() const {
  return missing_keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PbsRequest::missing_keys() const {
  // @@protoc_insertion_point(field_list:reconciliation.PbsRequest.missing_keys)
  return _internal_missing_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PbsRequest::_internal_mutable_missing_keys() {
  return &missing_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PbsRequest::mutable_missing_keys() {
  // @@protoc_insertion_point(field_mutable_list:reconciliation.PbsRequest.missing_keys)
  return _internal_mutable_missing_keys();
}

// -------------------------------------------------------------------

// PbsReply

// bytes decoding_msg = 1;
inline void PbsReply::clear_decoding_msg() {
  decoding_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PbsReply::decoding_msg() const {
  // @@protoc_insertion_point(field_get:reconciliation.PbsReply.decoding_msg)
  return _internal_decoding_msg();
}
inline void PbsReply::set_decoding_msg(const std::string& value) {
  _internal_set_decoding_msg(value);
  // @@protoc_insertion_point(field_set:reconciliation.PbsReply.decoding_msg)
}
inline std::string* PbsReply::mutable_decoding_msg() {
  // @@protoc_insertion_point(field_mutable:reconciliation.PbsReply.decoding_msg)
  return _internal_mutable_decoding_msg();
}
inline const std::string& PbsReply::_internal_decoding_msg() const {
  return decoding_msg_.Get();
}
inline void PbsReply::_internal_set_decoding_msg(const std::string& value) {
  
  decoding_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PbsReply::set_decoding_msg(std::string&& value) {
  
  decoding_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:reconciliation.PbsReply.decoding_msg)
}
inline void PbsReply::set_decoding_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  decoding_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:reconciliation.PbsReply.decoding_msg)
}
inline void PbsReply::set_decoding_msg(const void* value,
    size_t size) {
  
  decoding_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:reconciliation.PbsReply.decoding_msg)
}
inline std::string* PbsReply::_internal_mutable_decoding_msg() {
  
  return decoding_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PbsReply::release_decoding_msg() {
  // @@protoc_insertion_point(field_release:reconciliation.PbsReply.decoding_msg)
  return decoding_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PbsReply::set_allocated_decoding_msg(std::string* decoding_msg) {
  if (decoding_msg != nullptr) {
    
  } else {
    
  }
  decoding_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), decoding_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:reconciliation.PbsReply.decoding_msg)
}
inline std::string* PbsReply::unsafe_arena_release_decoding_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:reconciliation.PbsReply.decoding_msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return decoding_msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PbsReply::unsafe_arena_set_allocated_decoding_msg(
    std::string* decoding_msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (decoding_msg != nullptr) {
    
  } else {
    
  }
  decoding_msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      decoding_msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reconciliation.PbsReply.decoding_msg)
}

// repeated uint32 xors = 2;
inline int PbsReply::_internal_xors_size() const {
  return xors_.size();
}
inline int PbsReply::xors_size() const {
  return _internal_xors_size();
}
inline void PbsReply::clear_xors() {
  xors_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PbsReply::_internal_xors(int index) const {
  return xors_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PbsReply::xors(int index) const {
  // @@protoc_insertion_point(field_get:reconciliation.PbsReply.xors)
  return _internal_xors(index);
}
inline void PbsReply::set_xors(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  xors_.Set(index, value);
  // @@protoc_insertion_point(field_set:reconciliation.PbsReply.xors)
}
inline void PbsReply::_internal_add_xors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  xors_.Add(value);
}
inline void PbsReply::add_xors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_xors(value);
  // @@protoc_insertion_point(field_add:reconciliation.PbsReply.xors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PbsReply::_internal_xors() const {
  return xors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PbsReply::xors() const {
  // @@protoc_insertion_point(field_list:reconciliation.PbsReply.xors)
  return _internal_xors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PbsReply::_internal_mutable_xors() {
  return &xors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PbsReply::mutable_xors() {
  // @@protoc_insertion_point(field_mutable_list:reconciliation.PbsReply.xors)
  return _internal_mutable_xors();
}

// repeated uint32 checksum = 3;
inline int PbsReply::_internal_checksum_size() const {
  return checksum_.size();
}
inline int PbsReply::checksum_size() const {
  return _internal_checksum_size();
}
inline void PbsReply::clear_checksum() {
  checksum_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PbsReply::_internal_checksum(int index) const {
  return checksum_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PbsReply::checksum(int index) const {
  // @@protoc_insertion_point(field_get:reconciliation.PbsReply.checksum)
  return _internal_checksum(index);
}
inline void PbsReply::set_checksum(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  checksum_.Set(index, value);
  // @@protoc_insertion_point(field_set:reconciliation.PbsReply.checksum)
}
inline void PbsReply::_internal_add_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  checksum_.Add(value);
}
inline void PbsReply::add_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_checksum(value);
  // @@protoc_insertion_point(field_add:reconciliation.PbsReply.checksum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PbsReply::_internal_checksum() const {
  return checksum_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PbsReply::checksum() const {
  // @@protoc_insertion_point(field_list:reconciliation.PbsReply.checksum)
  return _internal_checksum();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PbsReply::_internal_mutable_checksum() {
  return &checksum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PbsReply::mutable_checksum() {
  // @@protoc_insertion_point(field_mutable_list:reconciliation.PbsReply.checksum)
  return _internal_mutable_checksum();
}

// repeated .reconciliation.KeyValue pushed_key_values = 4;
inline int PbsReply::_internal_pushed_key_values_size() const {
  return pushed_key_values_.size();
}
inline int PbsReply::pushed_key_values_size() const {
  return _internal_pushed_key_values_size();
}
inline void PbsReply::clear_pushed_key_values() {
  pushed_key_values_.Clear();
}
inline ::reconciliation::KeyValue* PbsReply::mutable_pushed_key_values(int index) {
  // @@protoc_insertion_point(field_mutable:reconciliation.PbsReply.pushed_key_values)
  return pushed_key_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >*
PbsReply::mutable_pushed_key_values() {
  // @@protoc_insertion_point(field_mutable_list:reconciliation.PbsReply.pushed_key_values)
  return &pushed_key_values_;
}
inline const ::reconciliation::KeyValue& PbsReply::_internal_pushed_key_values(int index) const {
  return pushed_key_values_.Get(index);
}
inline const ::reconciliation::KeyValue& PbsReply::pushed_key_values(int index) const {
  // @@protoc_insertion_point(field_get:reconciliation.PbsReply.pushed_key_values)
  return _internal_pushed_key_values(index);
}
inline ::reconciliation::KeyValue* PbsReply::_internal_add_pushed_key_values() {
  return pushed_key_values_.Add();
}
inline ::reconciliation::KeyValue* PbsReply::add_pushed_key_values() {
  // @@protoc_insertion_point(field_add:reconciliation.PbsReply.pushed_key_values)
  return _internal_add_pushed_key_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >&
PbsReply::pushed_key_values() const {
  // @@protoc_insertion_point(field_list:reconciliation.PbsReply.pushed_key_values)
  return pushed_key_values_;
}

// -------------------------------------------------------------------

// IbfCell

// int32 count = 1;
inline void IbfCell::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IbfCell::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IbfCell::count() const {
  // @@protoc_insertion_point(field_get:reconciliation.IbfCell.count)
  return _internal_count();
}
inline void IbfCell::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void IbfCell::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:reconciliation.IbfCell.count)
}

// uint64 keySum = 2;
inline void IbfCell::clear_keysum() {
  keysum_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IbfCell::_internal_keysum() const {
  return keysum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IbfCell::keysum() const {
  // @@protoc_insertion_point(field_get:reconciliation.IbfCell.keySum)
  return _internal_keysum();
}
inline void IbfCell::_internal_set_keysum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  keysum_ = value;
}
inline void IbfCell::set_keysum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_keysum(value);
  // @@protoc_insertion_point(field_set:reconciliation.IbfCell.keySum)
}

// uint32 keyCheck = 3;
inline void IbfCell::clear_keycheck() {
  keycheck_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IbfCell::_internal_keycheck() const {
  return keycheck_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IbfCell::keycheck() const {
  // @@protoc_insertion_point(field_get:reconciliation.IbfCell.keyCheck)
  return _internal_keycheck();
}
inline void IbfCell::_internal_set_keycheck(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  keycheck_ = value;
}
inline void IbfCell::set_keycheck(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_keycheck(value);
  // @@protoc_insertion_point(field_set:reconciliation.IbfCell.keyCheck)
}

// -------------------------------------------------------------------

// DDigestRequest

// repeated .reconciliation.IbfCell cells = 1;
inline int DDigestRequest::_internal_cells_size() const {
  return cells_.size();
}
inline int DDigestRequest::cells_size() const {
  return _internal_cells_size();
}
inline void DDigestRequest::clear_cells() {
  cells_.Clear();
}
inline ::reconciliation::IbfCell* DDigestRequest::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:reconciliation.DDigestRequest.cells)
  return cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::IbfCell >*
DDigestRequest::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:reconciliation.DDigestRequest.cells)
  return &cells_;
}
inline const ::reconciliation::IbfCell& DDigestRequest::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline const ::reconciliation::IbfCell& DDigestRequest::cells(int index) const {
  // @@protoc_insertion_point(field_get:reconciliation.DDigestRequest.cells)
  return _internal_cells(index);
}
inline ::reconciliation::IbfCell* DDigestRequest::_internal_add_cells() {
  return cells_.Add();
}
inline ::reconciliation::IbfCell* DDigestRequest::add_cells() {
  // @@protoc_insertion_point(field_add:reconciliation.DDigestRequest.cells)
  return _internal_add_cells();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::IbfCell >&
DDigestRequest::cells() const {
  // @@protoc_insertion_point(field_list:reconciliation.DDigestRequest.cells)
  return cells_;
}

// -------------------------------------------------------------------

// DDigestReply

// bool succeed = 1;
inline void DDigestReply::clear_succeed() {
  succeed_ = false;
}
inline bool DDigestReply::_internal_succeed() const {
  return succeed_;
}
inline bool DDigestReply::succeed() const {
  // @@protoc_insertion_point(field_get:reconciliation.DDigestReply.succeed)
  return _internal_succeed();
}
inline void DDigestReply::_internal_set_succeed(bool value) {
  
  succeed_ = value;
}
inline void DDigestReply::set_succeed(bool value) {
  _internal_set_succeed(value);
  // @@protoc_insertion_point(field_set:reconciliation.DDigestReply.succeed)
}

// repeated int32 missing_keys = 2;
inline int DDigestReply::_internal_missing_keys_size() const {
  return missing_keys_.size();
}
inline int DDigestReply::missing_keys_size() const {
  return _internal_missing_keys_size();
}
inline void DDigestReply::clear_missing_keys() {
  missing_keys_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DDigestReply::_internal_missing_keys(int index) const {
  return missing_keys_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DDigestReply::missing_keys(int index) const {
  // @@protoc_insertion_point(field_get:reconciliation.DDigestReply.missing_keys)
  return _internal_missing_keys(index);
}
inline void DDigestReply::set_missing_keys(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  missing_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:reconciliation.DDigestReply.missing_keys)
}
inline void DDigestReply::_internal_add_missing_keys(::PROTOBUF_NAMESPACE_ID::int32 value) {
  missing_keys_.Add(value);
}
inline void DDigestReply::add_missing_keys(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_missing_keys(value);
  // @@protoc_insertion_point(field_add:reconciliation.DDigestReply.missing_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DDigestReply::_internal_missing_keys() const {
  return missing_keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DDigestReply::missing_keys() const {
  // @@protoc_insertion_point(field_list:reconciliation.DDigestReply.missing_keys)
  return _internal_missing_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DDigestReply::_internal_mutable_missing_keys() {
  return &missing_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DDigestReply::mutable_missing_keys() {
  // @@protoc_insertion_point(field_mutable_list:reconciliation.DDigestReply.missing_keys)
  return _internal_mutable_missing_keys();
}

// repeated .reconciliation.KeyValue pushed_key_values = 3;
inline int DDigestReply::_internal_pushed_key_values_size() const {
  return pushed_key_values_.size();
}
inline int DDigestReply::pushed_key_values_size() const {
  return _internal_pushed_key_values_size();
}
inline void DDigestReply::clear_pushed_key_values() {
  pushed_key_values_.Clear();
}
inline ::reconciliation::KeyValue* DDigestReply::mutable_pushed_key_values(int index) {
  // @@protoc_insertion_point(field_mutable:reconciliation.DDigestReply.pushed_key_values)
  return pushed_key_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >*
DDigestReply::mutable_pushed_key_values() {
  // @@protoc_insertion_point(field_mutable_list:reconciliation.DDigestReply.pushed_key_values)
  return &pushed_key_values_;
}
inline const ::reconciliation::KeyValue& DDigestReply::_internal_pushed_key_values(int index) const {
  return pushed_key_values_.Get(index);
}
inline const ::reconciliation::KeyValue& DDigestReply::pushed_key_values(int index) const {
  // @@protoc_insertion_point(field_get:reconciliation.DDigestReply.pushed_key_values)
  return _internal_pushed_key_values(index);
}
inline ::reconciliation::KeyValue* DDigestReply::_internal_add_pushed_key_values() {
  return pushed_key_values_.Add();
}
inline ::reconciliation::KeyValue* DDigestReply::add_pushed_key_values() {
  // @@protoc_insertion_point(field_add:reconciliation.DDigestReply.pushed_key_values)
  return _internal_add_pushed_key_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >&
DDigestReply::pushed_key_values() const {
  // @@protoc_insertion_point(field_list:reconciliation.DDigestReply.pushed_key_values)
  return pushed_key_values_;
}

// -------------------------------------------------------------------

// GrapheneRequest

// uint32 m = 1;
inline void GrapheneRequest::clear_m() {
  m_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GrapheneRequest::_internal_m() const {
  return m_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GrapheneRequest::m() const {
  // @@protoc_insertion_point(field_get:reconciliation.GrapheneRequest.m)
  return _internal_m();
}
inline void GrapheneRequest::_internal_set_m(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  m_ = value;
}
inline void GrapheneRequest::set_m(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:reconciliation.GrapheneRequest.m)
}

// -------------------------------------------------------------------

// GrapheneReply

// uint32 a = 1;
inline void GrapheneReply::clear_a() {
  a_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GrapheneReply::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GrapheneReply::a() const {
  // @@protoc_insertion_point(field_get:reconciliation.GrapheneReply.a)
  return _internal_a();
}
inline void GrapheneReply::_internal_set_a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  a_ = value;
}
inline void GrapheneReply::set_a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:reconciliation.GrapheneReply.a)
}

// uint32 n = 2;
inline void GrapheneReply::clear_n() {
  n_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GrapheneReply::_internal_n() const {
  return n_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GrapheneReply::n() const {
  // @@protoc_insertion_point(field_get:reconciliation.GrapheneReply.n)
  return _internal_n();
}
inline void GrapheneReply::_internal_set_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_ = value;
}
inline void GrapheneReply::set_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:reconciliation.GrapheneReply.n)
}

// double fpr = 3;
inline void GrapheneReply::clear_fpr() {
  fpr_ = 0;
}
inline double GrapheneReply::_internal_fpr() const {
  return fpr_;
}
inline double GrapheneReply::fpr() const {
  // @@protoc_insertion_point(field_get:reconciliation.GrapheneReply.fpr)
  return _internal_fpr();
}
inline void GrapheneReply::_internal_set_fpr(double value) {
  
  fpr_ = value;
}
inline void GrapheneReply::set_fpr(double value) {
  _internal_set_fpr(value);
  // @@protoc_insertion_point(field_set:reconciliation.GrapheneReply.fpr)
}

// bytes bf = 4;
inline void GrapheneReply::clear_bf() {
  bf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GrapheneReply::bf() const {
  // @@protoc_insertion_point(field_get:reconciliation.GrapheneReply.bf)
  return _internal_bf();
}
inline void GrapheneReply::set_bf(const std::string& value) {
  _internal_set_bf(value);
  // @@protoc_insertion_point(field_set:reconciliation.GrapheneReply.bf)
}
inline std::string* GrapheneReply::mutable_bf() {
  // @@protoc_insertion_point(field_mutable:reconciliation.GrapheneReply.bf)
  return _internal_mutable_bf();
}
inline const std::string& GrapheneReply::_internal_bf() const {
  return bf_.Get();
}
inline void GrapheneReply::_internal_set_bf(const std::string& value) {
  
  bf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GrapheneReply::set_bf(std::string&& value) {
  
  bf_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:reconciliation.GrapheneReply.bf)
}
inline void GrapheneReply::set_bf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:reconciliation.GrapheneReply.bf)
}
inline void GrapheneReply::set_bf(const void* value,
    size_t size) {
  
  bf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:reconciliation.GrapheneReply.bf)
}
inline std::string* GrapheneReply::_internal_mutable_bf() {
  
  return bf_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GrapheneReply::release_bf() {
  // @@protoc_insertion_point(field_release:reconciliation.GrapheneReply.bf)
  return bf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GrapheneReply::set_allocated_bf(std::string* bf) {
  if (bf != nullptr) {
    
  } else {
    
  }
  bf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:reconciliation.GrapheneReply.bf)
}
inline std::string* GrapheneReply::unsafe_arena_release_bf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:reconciliation.GrapheneReply.bf)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bf_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GrapheneReply::unsafe_arena_set_allocated_bf(
    std::string* bf) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bf != nullptr) {
    
  } else {
    
  }
  bf_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bf, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reconciliation.GrapheneReply.bf)
}

// repeated .reconciliation.IbfCell ibf = 5;
inline int GrapheneReply::_internal_ibf_size() const {
  return ibf_.size();
}
inline int GrapheneReply::ibf_size() const {
  return _internal_ibf_size();
}
inline void GrapheneReply::clear_ibf() {
  ibf_.Clear();
}
inline ::reconciliation::IbfCell* GrapheneReply::mutable_ibf(int index) {
  // @@protoc_insertion_point(field_mutable:reconciliation.GrapheneReply.ibf)
  return ibf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::IbfCell >*
GrapheneReply::mutable_ibf() {
  // @@protoc_insertion_point(field_mutable_list:reconciliation.GrapheneReply.ibf)
  return &ibf_;
}
inline const ::reconciliation::IbfCell& GrapheneReply::_internal_ibf(int index) const {
  return ibf_.Get(index);
}
inline const ::reconciliation::IbfCell& GrapheneReply::ibf(int index) const {
  // @@protoc_insertion_point(field_get:reconciliation.GrapheneReply.ibf)
  return _internal_ibf(index);
}
inline ::reconciliation::IbfCell* GrapheneReply::_internal_add_ibf() {
  return ibf_.Add();
}
inline ::reconciliation::IbfCell* GrapheneReply::add_ibf() {
  // @@protoc_insertion_point(field_add:reconciliation.GrapheneReply.ibf)
  return _internal_add_ibf();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::IbfCell >&
GrapheneReply::ibf() const {
  // @@protoc_insertion_point(field_list:reconciliation.GrapheneReply.ibf)
  return ibf_;
}

// -------------------------------------------------------------------

// KeyValue

// int32 key = 1;
inline void KeyValue::clear_key() {
  key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyValue::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyValue::key() const {
  // @@protoc_insertion_point(field_get:reconciliation.KeyValue.key)
  return _internal_key();
}
inline void KeyValue::_internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_ = value;
}
inline void KeyValue::set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:reconciliation.KeyValue.key)
}

// string value = 2;
inline void KeyValue::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:reconciliation.KeyValue.value)
  return _internal_value();
}
inline void KeyValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:reconciliation.KeyValue.value)
}
inline std::string* KeyValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:reconciliation.KeyValue.value)
  return _internal_mutable_value();
}
inline const std::string& KeyValue::_internal_value() const {
  return value_.Get();
}
inline void KeyValue::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValue::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:reconciliation.KeyValue.value)
}
inline void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:reconciliation.KeyValue.value)
}
inline void KeyValue::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:reconciliation.KeyValue.value)
}
inline std::string* KeyValue::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:reconciliation.KeyValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:reconciliation.KeyValue.value)
}
inline std::string* KeyValue::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:reconciliation.KeyValue.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KeyValue::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reconciliation.KeyValue.value)
}

// -------------------------------------------------------------------

// SynchronizeMessage

// repeated .reconciliation.KeyValue pushes = 1;
inline int SynchronizeMessage::_internal_pushes_size() const {
  return pushes_.size();
}
inline int SynchronizeMessage::pushes_size() const {
  return _internal_pushes_size();
}
inline void SynchronizeMessage::clear_pushes() {
  pushes_.Clear();
}
inline ::reconciliation::KeyValue* SynchronizeMessage::mutable_pushes(int index) {
  // @@protoc_insertion_point(field_mutable:reconciliation.SynchronizeMessage.pushes)
  return pushes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >*
SynchronizeMessage::mutable_pushes() {
  // @@protoc_insertion_point(field_mutable_list:reconciliation.SynchronizeMessage.pushes)
  return &pushes_;
}
inline const ::reconciliation::KeyValue& SynchronizeMessage::_internal_pushes(int index) const {
  return pushes_.Get(index);
}
inline const ::reconciliation::KeyValue& SynchronizeMessage::pushes(int index) const {
  // @@protoc_insertion_point(field_get:reconciliation.SynchronizeMessage.pushes)
  return _internal_pushes(index);
}
inline ::reconciliation::KeyValue* SynchronizeMessage::_internal_add_pushes() {
  return pushes_.Add();
}
inline ::reconciliation::KeyValue* SynchronizeMessage::add_pushes() {
  // @@protoc_insertion_point(field_add:reconciliation.SynchronizeMessage.pushes)
  return _internal_add_pushes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reconciliation::KeyValue >&
SynchronizeMessage::pushes() const {
  // @@protoc_insertion_point(field_list:reconciliation.SynchronizeMessage.pushes)
  return pushes_;
}

// repeated int32 pulls = 2;
inline int SynchronizeMessage::_internal_pulls_size() const {
  return pulls_.size();
}
inline int SynchronizeMessage::pulls_size() const {
  return _internal_pulls_size();
}
inline void SynchronizeMessage::clear_pulls() {
  pulls_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SynchronizeMessage::_internal_pulls(int index) const {
  return pulls_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SynchronizeMessage::pulls(int index) const {
  // @@protoc_insertion_point(field_get:reconciliation.SynchronizeMessage.pulls)
  return _internal_pulls(index);
}
inline void SynchronizeMessage::set_pulls(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pulls_.Set(index, value);
  // @@protoc_insertion_point(field_set:reconciliation.SynchronizeMessage.pulls)
}
inline void SynchronizeMessage::_internal_add_pulls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pulls_.Add(value);
}
inline void SynchronizeMessage::add_pulls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pulls(value);
  // @@protoc_insertion_point(field_add:reconciliation.SynchronizeMessage.pulls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SynchronizeMessage::_internal_pulls() const {
  return pulls_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SynchronizeMessage::pulls() const {
  // @@protoc_insertion_point(field_list:reconciliation.SynchronizeMessage.pulls)
  return _internal_pulls();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SynchronizeMessage::_internal_mutable_pulls() {
  return &pulls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SynchronizeMessage::mutable_pulls() {
  // @@protoc_insertion_point(field_mutable_list:reconciliation.SynchronizeMessage.pulls)
  return _internal_mutable_pulls();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace reconciliation

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::reconciliation::SetUpRequest_Method> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::reconciliation::SetUpRequest_Method>() {
  return ::reconciliation::SetUpRequest_Method_descriptor();
}
template <> struct is_proto_enum< ::reconciliation::SetUpReply_PreviousExperimentStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::reconciliation::SetUpReply_PreviousExperimentStatus>() {
  return ::reconciliation::SetUpReply_PreviousExperimentStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_reconciliation_2eproto

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: reconciliation.proto
#ifndef GRPC_reconciliation_2eproto__INCLUDED
#define GRPC_reconciliation_2eproto__INCLUDED

#include "reconciliation.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace reconciliation {

// The estimation service
class Estimation final {
 public:
  static constexpr char const* service_full_name() {
    return "reconciliation.Estimation";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Estimate(::grpc::ClientContext* context, const ::reconciliation::EstimateRequest& request, ::reconciliation::EstimateReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::EstimateReply>> AsyncEstimate(::grpc::ClientContext* context, const ::reconciliation::EstimateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::EstimateReply>>(AsyncEstimateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::EstimateReply>> PrepareAsyncEstimate(::grpc::ClientContext* context, const ::reconciliation::EstimateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::EstimateReply>>(PrepareAsyncEstimateRaw(context, request, cq));
    }
    virtual ::grpc::Status ReconcileSetUp(::grpc::ClientContext* context, const ::reconciliation::SetUpRequest& request, ::reconciliation::SetUpReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::SetUpReply>> AsyncReconcileSetUp(::grpc::ClientContext* context, const ::reconciliation::SetUpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::SetUpReply>>(AsyncReconcileSetUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::SetUpReply>> PrepareAsyncReconcileSetUp(::grpc::ClientContext* context, const ::reconciliation::SetUpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::SetUpReply>>(PrepareAsyncReconcileSetUpRaw(context, request, cq));
    }
    virtual ::grpc::Status ReconcilePinSketch(::grpc::ClientContext* context, const ::reconciliation::PinSketchRequest& request, ::reconciliation::PinSketchReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::PinSketchReply>> AsyncReconcilePinSketch(::grpc::ClientContext* context, const ::reconciliation::PinSketchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::PinSketchReply>>(AsyncReconcilePinSketchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::PinSketchReply>> PrepareAsyncReconcilePinSketch(::grpc::ClientContext* context, const ::reconciliation::PinSketchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::PinSketchReply>>(PrepareAsyncReconcilePinSketchRaw(context, request, cq));
    }
    virtual ::grpc::Status ReconcileDDigest(::grpc::ClientContext* context, const ::reconciliation::DDigestRequest& request, ::reconciliation::DDigestReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::DDigestReply>> AsyncReconcileDDigest(::grpc::ClientContext* context, const ::reconciliation::DDigestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::DDigestReply>>(AsyncReconcileDDigestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::DDigestReply>> PrepareAsyncReconcileDDigest(::grpc::ClientContext* context, const ::reconciliation::DDigestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::DDigestReply>>(PrepareAsyncReconcileDDigestRaw(context, request, cq));
    }
    virtual ::grpc::Status ReconcileGraphene(::grpc::ClientContext* context, const ::reconciliation::GrapheneRequest& request, ::reconciliation::GrapheneReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::GrapheneReply>> AsyncReconcileGraphene(::grpc::ClientContext* context, const ::reconciliation::GrapheneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::GrapheneReply>>(AsyncReconcileGrapheneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::GrapheneReply>> PrepareAsyncReconcileGraphene(::grpc::ClientContext* context, const ::reconciliation::GrapheneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::GrapheneReply>>(PrepareAsyncReconcileGrapheneRaw(context, request, cq));
    }
    virtual ::grpc::Status ReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::reconciliation::PbsRequest& request, ::reconciliation::PbsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::PbsReply>> AsyncReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::reconciliation::PbsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::PbsReply>>(AsyncReconcileParityBitmapSketchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::PbsReply>> PrepareAsyncReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::reconciliation::PbsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::PbsReply>>(PrepareAsyncReconcileParityBitmapSketchRaw(context, request, cq));
    }
    virtual ::grpc::Status Synchronize(::grpc::ClientContext* context, const ::reconciliation::SynchronizeMessage& request, ::reconciliation::SynchronizeMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::SynchronizeMessage>> AsyncSynchronize(::grpc::ClientContext* context, const ::reconciliation::SynchronizeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::SynchronizeMessage>>(AsyncSynchronizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::SynchronizeMessage>> PrepareAsyncSynchronize(::grpc::ClientContext* context, const ::reconciliation::SynchronizeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::SynchronizeMessage>>(PrepareAsyncSynchronizeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Estimate(::grpc::ClientContext* context, const ::reconciliation::EstimateRequest* request, ::reconciliation::EstimateReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Estimate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::EstimateReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Estimate(::grpc::ClientContext* context, const ::reconciliation::EstimateRequest* request, ::reconciliation::EstimateReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Estimate(::grpc::ClientContext* context, const ::reconciliation::EstimateRequest* request, ::reconciliation::EstimateReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Estimate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::EstimateReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Estimate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::EstimateReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ReconcileSetUp(::grpc::ClientContext* context, const ::reconciliation::SetUpRequest* request, ::reconciliation::SetUpReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReconcileSetUp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::SetUpReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReconcileSetUp(::grpc::ClientContext* context, const ::reconciliation::SetUpRequest* request, ::reconciliation::SetUpReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReconcileSetUp(::grpc::ClientContext* context, const ::reconciliation::SetUpRequest* request, ::reconciliation::SetUpReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReconcileSetUp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::SetUpReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReconcileSetUp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::SetUpReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ReconcilePinSketch(::grpc::ClientContext* context, const ::reconciliation::PinSketchRequest* request, ::reconciliation::PinSketchReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReconcilePinSketch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::PinSketchReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReconcilePinSketch(::grpc::ClientContext* context, const ::reconciliation::PinSketchRequest* request, ::reconciliation::PinSketchReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReconcilePinSketch(::grpc::ClientContext* context, const ::reconciliation::PinSketchRequest* request, ::reconciliation::PinSketchReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReconcilePinSketch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::PinSketchReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReconcilePinSketch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::PinSketchReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ReconcileDDigest(::grpc::ClientContext* context, const ::reconciliation::DDigestRequest* request, ::reconciliation::DDigestReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReconcileDDigest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::DDigestReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReconcileDDigest(::grpc::ClientContext* context, const ::reconciliation::DDigestRequest* request, ::reconciliation::DDigestReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReconcileDDigest(::grpc::ClientContext* context, const ::reconciliation::DDigestRequest* request, ::reconciliation::DDigestReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReconcileDDigest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::DDigestReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReconcileDDigest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::DDigestReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ReconcileGraphene(::grpc::ClientContext* context, const ::reconciliation::GrapheneRequest* request, ::reconciliation::GrapheneReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReconcileGraphene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::GrapheneReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReconcileGraphene(::grpc::ClientContext* context, const ::reconciliation::GrapheneRequest* request, ::reconciliation::GrapheneReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReconcileGraphene(::grpc::ClientContext* context, const ::reconciliation::GrapheneRequest* request, ::reconciliation::GrapheneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReconcileGraphene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::GrapheneReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReconcileGraphene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::GrapheneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::reconciliation::PbsRequest* request, ::reconciliation::PbsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::PbsReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::reconciliation::PbsRequest* request, ::reconciliation::PbsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::reconciliation::PbsRequest* request, ::reconciliation::PbsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::PbsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::PbsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Synchronize(::grpc::ClientContext* context, const ::reconciliation::SynchronizeMessage* request, ::reconciliation::SynchronizeMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Synchronize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::SynchronizeMessage* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Synchronize(::grpc::ClientContext* context, const ::reconciliation::SynchronizeMessage* request, ::reconciliation::SynchronizeMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Synchronize(::grpc::ClientContext* context, const ::reconciliation::SynchronizeMessage* request, ::reconciliation::SynchronizeMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Synchronize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::SynchronizeMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Synchronize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::SynchronizeMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::EstimateReply>* AsyncEstimateRaw(::grpc::ClientContext* context, const ::reconciliation::EstimateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::EstimateReply>* PrepareAsyncEstimateRaw(::grpc::ClientContext* context, const ::reconciliation::EstimateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::SetUpReply>* AsyncReconcileSetUpRaw(::grpc::ClientContext* context, const ::reconciliation::SetUpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::SetUpReply>* PrepareAsyncReconcileSetUpRaw(::grpc::ClientContext* context, const ::reconciliation::SetUpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::PinSketchReply>* AsyncReconcilePinSketchRaw(::grpc::ClientContext* context, const ::reconciliation::PinSketchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::PinSketchReply>* PrepareAsyncReconcilePinSketchRaw(::grpc::ClientContext* context, const ::reconciliation::PinSketchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::DDigestReply>* AsyncReconcileDDigestRaw(::grpc::ClientContext* context, const ::reconciliation::DDigestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::DDigestReply>* PrepareAsyncReconcileDDigestRaw(::grpc::ClientContext* context, const ::reconciliation::DDigestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::GrapheneReply>* AsyncReconcileGrapheneRaw(::grpc::ClientContext* context, const ::reconciliation::GrapheneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::GrapheneReply>* PrepareAsyncReconcileGrapheneRaw(::grpc::ClientContext* context, const ::reconciliation::GrapheneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::PbsReply>* AsyncReconcileParityBitmapSketchRaw(::grpc::ClientContext* context, const ::reconciliation::PbsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::PbsReply>* PrepareAsyncReconcileParityBitmapSketchRaw(::grpc::ClientContext* context, const ::reconciliation::PbsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::SynchronizeMessage>* AsyncSynchronizeRaw(::grpc::ClientContext* context, const ::reconciliation::SynchronizeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::reconciliation::SynchronizeMessage>* PrepareAsyncSynchronizeRaw(::grpc::ClientContext* context, const ::reconciliation::SynchronizeMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Estimate(::grpc::ClientContext* context, const ::reconciliation::EstimateRequest& request, ::reconciliation::EstimateReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::EstimateReply>> AsyncEstimate(::grpc::ClientContext* context, const ::reconciliation::EstimateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::EstimateReply>>(AsyncEstimateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::EstimateReply>> PrepareAsyncEstimate(::grpc::ClientContext* context, const ::reconciliation::EstimateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::EstimateReply>>(PrepareAsyncEstimateRaw(context, request, cq));
    }
    ::grpc::Status ReconcileSetUp(::grpc::ClientContext* context, const ::reconciliation::SetUpRequest& request, ::reconciliation::SetUpReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::SetUpReply>> AsyncReconcileSetUp(::grpc::ClientContext* context, const ::reconciliation::SetUpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::SetUpReply>>(AsyncReconcileSetUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::SetUpReply>> PrepareAsyncReconcileSetUp(::grpc::ClientContext* context, const ::reconciliation::SetUpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::SetUpReply>>(PrepareAsyncReconcileSetUpRaw(context, request, cq));
    }
    ::grpc::Status ReconcilePinSketch(::grpc::ClientContext* context, const ::reconciliation::PinSketchRequest& request, ::reconciliation::PinSketchReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::PinSketchReply>> AsyncReconcilePinSketch(::grpc::ClientContext* context, const ::reconciliation::PinSketchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::PinSketchReply>>(AsyncReconcilePinSketchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::PinSketchReply>> PrepareAsyncReconcilePinSketch(::grpc::ClientContext* context, const ::reconciliation::PinSketchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::PinSketchReply>>(PrepareAsyncReconcilePinSketchRaw(context, request, cq));
    }
    ::grpc::Status ReconcileDDigest(::grpc::ClientContext* context, const ::reconciliation::DDigestRequest& request, ::reconciliation::DDigestReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::DDigestReply>> AsyncReconcileDDigest(::grpc::ClientContext* context, const ::reconciliation::DDigestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::DDigestReply>>(AsyncReconcileDDigestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::DDigestReply>> PrepareAsyncReconcileDDigest(::grpc::ClientContext* context, const ::reconciliation::DDigestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::DDigestReply>>(PrepareAsyncReconcileDDigestRaw(context, request, cq));
    }
    ::grpc::Status ReconcileGraphene(::grpc::ClientContext* context, const ::reconciliation::GrapheneRequest& request, ::reconciliation::GrapheneReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::GrapheneReply>> AsyncReconcileGraphene(::grpc::ClientContext* context, const ::reconciliation::GrapheneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::GrapheneReply>>(AsyncReconcileGrapheneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::GrapheneReply>> PrepareAsyncReconcileGraphene(::grpc::ClientContext* context, const ::reconciliation::GrapheneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::GrapheneReply>>(PrepareAsyncReconcileGrapheneRaw(context, request, cq));
    }
    ::grpc::Status ReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::reconciliation::PbsRequest& request, ::reconciliation::PbsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::PbsReply>> AsyncReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::reconciliation::PbsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::PbsReply>>(AsyncReconcileParityBitmapSketchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::PbsReply>> PrepareAsyncReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::reconciliation::PbsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::PbsReply>>(PrepareAsyncReconcileParityBitmapSketchRaw(context, request, cq));
    }
    ::grpc::Status Synchronize(::grpc::ClientContext* context, const ::reconciliation::SynchronizeMessage& request, ::reconciliation::SynchronizeMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::SynchronizeMessage>> AsyncSynchronize(::grpc::ClientContext* context, const ::reconciliation::SynchronizeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::SynchronizeMessage>>(AsyncSynchronizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::SynchronizeMessage>> PrepareAsyncSynchronize(::grpc::ClientContext* context, const ::reconciliation::SynchronizeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::reconciliation::SynchronizeMessage>>(PrepareAsyncSynchronizeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Estimate(::grpc::ClientContext* context, const ::reconciliation::EstimateRequest* request, ::reconciliation::EstimateReply* response, std::function<void(::grpc::Status)>) override;
      void Estimate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::EstimateReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Estimate(::grpc::ClientContext* context, const ::reconciliation::EstimateRequest* request, ::reconciliation::EstimateReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Estimate(::grpc::ClientContext* context, const ::reconciliation::EstimateRequest* request, ::reconciliation::EstimateReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Estimate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::EstimateReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Estimate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::EstimateReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReconcileSetUp(::grpc::ClientContext* context, const ::reconciliation::SetUpRequest* request, ::reconciliation::SetUpReply* response, std::function<void(::grpc::Status)>) override;
      void ReconcileSetUp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::SetUpReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReconcileSetUp(::grpc::ClientContext* context, const ::reconciliation::SetUpRequest* request, ::reconciliation::SetUpReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReconcileSetUp(::grpc::ClientContext* context, const ::reconciliation::SetUpRequest* request, ::reconciliation::SetUpReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReconcileSetUp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::SetUpReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReconcileSetUp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::SetUpReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReconcilePinSketch(::grpc::ClientContext* context, const ::reconciliation::PinSketchRequest* request, ::reconciliation::PinSketchReply* response, std::function<void(::grpc::Status)>) override;
      void ReconcilePinSketch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::PinSketchReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReconcilePinSketch(::grpc::ClientContext* context, const ::reconciliation::PinSketchRequest* request, ::reconciliation::PinSketchReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReconcilePinSketch(::grpc::ClientContext* context, const ::reconciliation::PinSketchRequest* request, ::reconciliation::PinSketchReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReconcilePinSketch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::PinSketchReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReconcilePinSketch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::PinSketchReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReconcileDDigest(::grpc::ClientContext* context, const ::reconciliation::DDigestRequest* request, ::reconciliation::DDigestReply* response, std::function<void(::grpc::Status)>) override;
      void ReconcileDDigest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::DDigestReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReconcileDDigest(::grpc::ClientContext* context, const ::reconciliation::DDigestRequest* request, ::reconciliation::DDigestReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReconcileDDigest(::grpc::ClientContext* context, const ::reconciliation::DDigestRequest* request, ::reconciliation::DDigestReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReconcileDDigest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::DDigestReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReconcileDDigest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::DDigestReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReconcileGraphene(::grpc::ClientContext* context, const ::reconciliation::GrapheneRequest* request, ::reconciliation::GrapheneReply* response, std::function<void(::grpc::Status)>) override;
      void ReconcileGraphene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::GrapheneReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReconcileGraphene(::grpc::ClientContext* context, const ::reconciliation::GrapheneRequest* request, ::reconciliation::GrapheneReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReconcileGraphene(::grpc::ClientContext* context, const ::reconciliation::GrapheneRequest* request, ::reconciliation::GrapheneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReconcileGraphene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::GrapheneReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReconcileGraphene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::GrapheneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::reconciliation::PbsRequest* request, ::reconciliation::PbsReply* response, std::function<void(::grpc::Status)>) override;
      void ReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::PbsReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::reconciliation::PbsRequest* request, ::reconciliation::PbsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::reconciliation::PbsRequest* request, ::reconciliation::PbsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::PbsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReconcileParityBitmapSketch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::PbsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Synchronize(::grpc::ClientContext* context, const ::reconciliation::SynchronizeMessage* request, ::reconciliation::SynchronizeMessage* response, std::function<void(::grpc::Status)>) override;
      void Synchronize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::SynchronizeMessage* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Synchronize(::grpc::ClientContext* context, const ::reconciliation::SynchronizeMessage* request, ::reconciliation::SynchronizeMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Synchronize(::grpc::ClientContext* context, const ::reconciliation::SynchronizeMessage* request, ::reconciliation::SynchronizeMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Synchronize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::SynchronizeMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Synchronize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::reconciliation::SynchronizeMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::reconciliation::EstimateReply>* AsyncEstimateRaw(::grpc::ClientContext* context, const ::reconciliation::EstimateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reconciliation::EstimateReply>* PrepareAsyncEstimateRaw(::grpc::ClientContext* context, const ::reconciliation::EstimateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reconciliation::SetUpReply>* AsyncReconcileSetUpRaw(::grpc::ClientContext* context, const ::reconciliation::SetUpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reconciliation::SetUpReply>* PrepareAsyncReconcileSetUpRaw(::grpc::ClientContext* context, const ::reconciliation::SetUpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reconciliation::PinSketchReply>* AsyncReconcilePinSketchRaw(::grpc::ClientContext* context, const ::reconciliation::PinSketchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reconciliation::PinSketchReply>* PrepareAsyncReconcilePinSketchRaw(::grpc::ClientContext* context, const ::reconciliation::PinSketchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reconciliation::DDigestReply>* AsyncReconcileDDigestRaw(::grpc::ClientContext* context, const ::reconciliation::DDigestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reconciliation::DDigestReply>* PrepareAsyncReconcileDDigestRaw(::grpc::ClientContext* context, const ::reconciliation::DDigestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reconciliation::GrapheneReply>* AsyncReconcileGrapheneRaw(::grpc::ClientContext* context, const ::reconciliation::GrapheneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reconciliation::GrapheneReply>* PrepareAsyncReconcileGrapheneRaw(::grpc::ClientContext* context, const ::reconciliation::GrapheneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reconciliation::PbsReply>* AsyncReconcileParityBitmapSketchRaw(::grpc::ClientContext* context, const ::reconciliation::PbsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reconciliation::PbsReply>* PrepareAsyncReconcileParityBitmapSketchRaw(::grpc::ClientContext* context, const ::reconciliation::PbsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reconciliation::SynchronizeMessage>* AsyncSynchronizeRaw(::grpc::ClientContext* context, const ::reconciliation::SynchronizeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::reconciliation::SynchronizeMessage>* PrepareAsyncSynchronizeRaw(::grpc::ClientContext* context, const ::reconciliation::SynchronizeMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Estimate_;
    const ::grpc::internal::RpcMethod rpcmethod_ReconcileSetUp_;
    const ::grpc::internal::RpcMethod rpcmethod_ReconcilePinSketch_;
    const ::grpc::internal::RpcMethod rpcmethod_ReconcileDDigest_;
    const ::grpc::internal::RpcMethod rpcmethod_ReconcileGraphene_;
    const ::grpc::internal::RpcMethod rpcmethod_ReconcileParityBitmapSketch_;
    const ::grpc::internal::RpcMethod rpcmethod_Synchronize_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Estimate(::grpc::ServerContext* context, const ::reconciliation::EstimateRequest* request, ::reconciliation::EstimateReply* response);
    virtual ::grpc::Status ReconcileSetUp(::grpc::ServerContext* context, const ::reconciliation::SetUpRequest* request, ::reconciliation::SetUpReply* response);
    virtual ::grpc::Status ReconcilePinSketch(::grpc::ServerContext* context, const ::reconciliation::PinSketchRequest* request, ::reconciliation::PinSketchReply* response);
    virtual ::grpc::Status ReconcileDDigest(::grpc::ServerContext* context, const ::reconciliation::DDigestRequest* request, ::reconciliation::DDigestReply* response);
    virtual ::grpc::Status ReconcileGraphene(::grpc::ServerContext* context, const ::reconciliation::GrapheneRequest* request, ::reconciliation::GrapheneReply* response);
    virtual ::grpc::Status ReconcileParityBitmapSketch(::grpc::ServerContext* context, const ::reconciliation::PbsRequest* request, ::reconciliation::PbsReply* response);
    virtual ::grpc::Status Synchronize(::grpc::ServerContext* context, const ::reconciliation::SynchronizeMessage* request, ::reconciliation::SynchronizeMessage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Estimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Estimate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Estimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Estimate(::grpc::ServerContext* /*context*/, const ::reconciliation::EstimateRequest* /*request*/, ::reconciliation::EstimateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstimate(::grpc::ServerContext* context, ::reconciliation::EstimateRequest* request, ::grpc::ServerAsyncResponseWriter< ::reconciliation::EstimateReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReconcileSetUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReconcileSetUp() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ReconcileSetUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileSetUp(::grpc::ServerContext* /*context*/, const ::reconciliation::SetUpRequest* /*request*/, ::reconciliation::SetUpReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconcileSetUp(::grpc::ServerContext* context, ::reconciliation::SetUpRequest* request, ::grpc::ServerAsyncResponseWriter< ::reconciliation::SetUpReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReconcilePinSketch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReconcilePinSketch() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ReconcilePinSketch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcilePinSketch(::grpc::ServerContext* /*context*/, const ::reconciliation::PinSketchRequest* /*request*/, ::reconciliation::PinSketchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconcilePinSketch(::grpc::ServerContext* context, ::reconciliation::PinSketchRequest* request, ::grpc::ServerAsyncResponseWriter< ::reconciliation::PinSketchReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReconcileDDigest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReconcileDDigest() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ReconcileDDigest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileDDigest(::grpc::ServerContext* /*context*/, const ::reconciliation::DDigestRequest* /*request*/, ::reconciliation::DDigestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconcileDDigest(::grpc::ServerContext* context, ::reconciliation::DDigestRequest* request, ::grpc::ServerAsyncResponseWriter< ::reconciliation::DDigestReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReconcileGraphene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReconcileGraphene() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ReconcileGraphene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileGraphene(::grpc::ServerContext* /*context*/, const ::reconciliation::GrapheneRequest* /*request*/, ::reconciliation::GrapheneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconcileGraphene(::grpc::ServerContext* context, ::reconciliation::GrapheneRequest* request, ::grpc::ServerAsyncResponseWriter< ::reconciliation::GrapheneReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReconcileParityBitmapSketch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReconcileParityBitmapSketch() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ReconcileParityBitmapSketch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileParityBitmapSketch(::grpc::ServerContext* /*context*/, const ::reconciliation::PbsRequest* /*request*/, ::reconciliation::PbsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconcileParityBitmapSketch(::grpc::ServerContext* context, ::reconciliation::PbsRequest* request, ::grpc::ServerAsyncResponseWriter< ::reconciliation::PbsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Synchronize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Synchronize() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Synchronize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Synchronize(::grpc::ServerContext* /*context*/, const ::reconciliation::SynchronizeMessage* /*request*/, ::reconciliation::SynchronizeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynchronize(::grpc::ServerContext* context, ::reconciliation::SynchronizeMessage* request, ::grpc::ServerAsyncResponseWriter< ::reconciliation::SynchronizeMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Estimate<WithAsyncMethod_ReconcileSetUp<WithAsyncMethod_ReconcilePinSketch<WithAsyncMethod_ReconcileDDigest<WithAsyncMethod_ReconcileGraphene<WithAsyncMethod_ReconcileParityBitmapSketch<WithAsyncMethod_Synchronize<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Estimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Estimate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::reconciliation::EstimateRequest, ::reconciliation::EstimateReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::reconciliation::EstimateRequest* request, ::reconciliation::EstimateReply* response) { return this->Estimate(context, request, response); }));}
    void SetMessageAllocatorFor_Estimate(
        ::grpc::experimental::MessageAllocator< ::reconciliation::EstimateRequest, ::reconciliation::EstimateReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::reconciliation::EstimateRequest, ::reconciliation::EstimateReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Estimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Estimate(::grpc::ServerContext* /*context*/, const ::reconciliation::EstimateRequest* /*request*/, ::reconciliation::EstimateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Estimate(
      ::grpc::CallbackServerContext* /*context*/, const ::reconciliation::EstimateRequest* /*request*/, ::reconciliation::EstimateReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Estimate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::reconciliation::EstimateRequest* /*request*/, ::reconciliation::EstimateReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReconcileSetUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReconcileSetUp() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::reconciliation::SetUpRequest, ::reconciliation::SetUpReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::reconciliation::SetUpRequest* request, ::reconciliation::SetUpReply* response) { return this->ReconcileSetUp(context, request, response); }));}
    void SetMessageAllocatorFor_ReconcileSetUp(
        ::grpc::experimental::MessageAllocator< ::reconciliation::SetUpRequest, ::reconciliation::SetUpReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::reconciliation::SetUpRequest, ::reconciliation::SetUpReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReconcileSetUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileSetUp(::grpc::ServerContext* /*context*/, const ::reconciliation::SetUpRequest* /*request*/, ::reconciliation::SetUpReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReconcileSetUp(
      ::grpc::CallbackServerContext* /*context*/, const ::reconciliation::SetUpRequest* /*request*/, ::reconciliation::SetUpReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReconcileSetUp(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::reconciliation::SetUpRequest* /*request*/, ::reconciliation::SetUpReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReconcilePinSketch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReconcilePinSketch() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::reconciliation::PinSketchRequest, ::reconciliation::PinSketchReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::reconciliation::PinSketchRequest* request, ::reconciliation::PinSketchReply* response) { return this->ReconcilePinSketch(context, request, response); }));}
    void SetMessageAllocatorFor_ReconcilePinSketch(
        ::grpc::experimental::MessageAllocator< ::reconciliation::PinSketchRequest, ::reconciliation::PinSketchReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::reconciliation::PinSketchRequest, ::reconciliation::PinSketchReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReconcilePinSketch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcilePinSketch(::grpc::ServerContext* /*context*/, const ::reconciliation::PinSketchRequest* /*request*/, ::reconciliation::PinSketchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReconcilePinSketch(
      ::grpc::CallbackServerContext* /*context*/, const ::reconciliation::PinSketchRequest* /*request*/, ::reconciliation::PinSketchReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReconcilePinSketch(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::reconciliation::PinSketchRequest* /*request*/, ::reconciliation::PinSketchReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReconcileDDigest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReconcileDDigest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::reconciliation::DDigestRequest, ::reconciliation::DDigestReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::reconciliation::DDigestRequest* request, ::reconciliation::DDigestReply* response) { return this->ReconcileDDigest(context, request, response); }));}
    void SetMessageAllocatorFor_ReconcileDDigest(
        ::grpc::experimental::MessageAllocator< ::reconciliation::DDigestRequest, ::reconciliation::DDigestReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::reconciliation::DDigestRequest, ::reconciliation::DDigestReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReconcileDDigest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileDDigest(::grpc::ServerContext* /*context*/, const ::reconciliation::DDigestRequest* /*request*/, ::reconciliation::DDigestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReconcileDDigest(
      ::grpc::CallbackServerContext* /*context*/, const ::reconciliation::DDigestRequest* /*request*/, ::reconciliation::DDigestReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReconcileDDigest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::reconciliation::DDigestRequest* /*request*/, ::reconciliation::DDigestReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReconcileGraphene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReconcileGraphene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::reconciliation::GrapheneRequest, ::reconciliation::GrapheneReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::reconciliation::GrapheneRequest* request, ::reconciliation::GrapheneReply* response) { return this->ReconcileGraphene(context, request, response); }));}
    void SetMessageAllocatorFor_ReconcileGraphene(
        ::grpc::experimental::MessageAllocator< ::reconciliation::GrapheneRequest, ::reconciliation::GrapheneReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::reconciliation::GrapheneRequest, ::reconciliation::GrapheneReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReconcileGraphene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileGraphene(::grpc::ServerContext* /*context*/, const ::reconciliation::GrapheneRequest* /*request*/, ::reconciliation::GrapheneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReconcileGraphene(
      ::grpc::CallbackServerContext* /*context*/, const ::reconciliation::GrapheneRequest* /*request*/, ::reconciliation::GrapheneReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReconcileGraphene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::reconciliation::GrapheneRequest* /*request*/, ::reconciliation::GrapheneReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReconcileParityBitmapSketch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReconcileParityBitmapSketch() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::reconciliation::PbsRequest, ::reconciliation::PbsReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::reconciliation::PbsRequest* request, ::reconciliation::PbsReply* response) { return this->ReconcileParityBitmapSketch(context, request, response); }));}
    void SetMessageAllocatorFor_ReconcileParityBitmapSketch(
        ::grpc::experimental::MessageAllocator< ::reconciliation::PbsRequest, ::reconciliation::PbsReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::reconciliation::PbsRequest, ::reconciliation::PbsReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReconcileParityBitmapSketch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileParityBitmapSketch(::grpc::ServerContext* /*context*/, const ::reconciliation::PbsRequest* /*request*/, ::reconciliation::PbsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReconcileParityBitmapSketch(
      ::grpc::CallbackServerContext* /*context*/, const ::reconciliation::PbsRequest* /*request*/, ::reconciliation::PbsReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReconcileParityBitmapSketch(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::reconciliation::PbsRequest* /*request*/, ::reconciliation::PbsReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Synchronize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Synchronize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::reconciliation::SynchronizeMessage, ::reconciliation::SynchronizeMessage>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::reconciliation::SynchronizeMessage* request, ::reconciliation::SynchronizeMessage* response) { return this->Synchronize(context, request, response); }));}
    void SetMessageAllocatorFor_Synchronize(
        ::grpc::experimental::MessageAllocator< ::reconciliation::SynchronizeMessage, ::reconciliation::SynchronizeMessage>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::reconciliation::SynchronizeMessage, ::reconciliation::SynchronizeMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Synchronize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Synchronize(::grpc::ServerContext* /*context*/, const ::reconciliation::SynchronizeMessage* /*request*/, ::reconciliation::SynchronizeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Synchronize(
      ::grpc::CallbackServerContext* /*context*/, const ::reconciliation::SynchronizeMessage* /*request*/, ::reconciliation::SynchronizeMessage* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Synchronize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::reconciliation::SynchronizeMessage* /*request*/, ::reconciliation::SynchronizeMessage* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Estimate<ExperimentalWithCallbackMethod_ReconcileSetUp<ExperimentalWithCallbackMethod_ReconcilePinSketch<ExperimentalWithCallbackMethod_ReconcileDDigest<ExperimentalWithCallbackMethod_ReconcileGraphene<ExperimentalWithCallbackMethod_ReconcileParityBitmapSketch<ExperimentalWithCallbackMethod_Synchronize<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Estimate<ExperimentalWithCallbackMethod_ReconcileSetUp<ExperimentalWithCallbackMethod_ReconcilePinSketch<ExperimentalWithCallbackMethod_ReconcileDDigest<ExperimentalWithCallbackMethod_ReconcileGraphene<ExperimentalWithCallbackMethod_ReconcileParityBitmapSketch<ExperimentalWithCallbackMethod_Synchronize<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Estimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Estimate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Estimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Estimate(::grpc::ServerContext* /*context*/, const ::reconciliation::EstimateRequest* /*request*/, ::reconciliation::EstimateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReconcileSetUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReconcileSetUp() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ReconcileSetUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileSetUp(::grpc::ServerContext* /*context*/, const ::reconciliation::SetUpRequest* /*request*/, ::reconciliation::SetUpReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReconcilePinSketch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReconcilePinSketch() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ReconcilePinSketch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcilePinSketch(::grpc::ServerContext* /*context*/, const ::reconciliation::PinSketchRequest* /*request*/, ::reconciliation::PinSketchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReconcileDDigest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReconcileDDigest() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ReconcileDDigest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileDDigest(::grpc::ServerContext* /*context*/, const ::reconciliation::DDigestRequest* /*request*/, ::reconciliation::DDigestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReconcileGraphene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReconcileGraphene() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ReconcileGraphene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileGraphene(::grpc::ServerContext* /*context*/, const ::reconciliation::GrapheneRequest* /*request*/, ::reconciliation::GrapheneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReconcileParityBitmapSketch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReconcileParityBitmapSketch() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ReconcileParityBitmapSketch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileParityBitmapSketch(::grpc::ServerContext* /*context*/, const ::reconciliation::PbsRequest* /*request*/, ::reconciliation::PbsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Synchronize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Synchronize() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Synchronize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Synchronize(::grpc::ServerContext* /*context*/, const ::reconciliation::SynchronizeMessage* /*request*/, ::reconciliation::SynchronizeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Estimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Estimate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Estimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Estimate(::grpc::ServerContext* /*context*/, const ::reconciliation::EstimateRequest* /*request*/, ::reconciliation::EstimateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstimate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReconcileSetUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReconcileSetUp() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ReconcileSetUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileSetUp(::grpc::ServerContext* /*context*/, const ::reconciliation::SetUpRequest* /*request*/, ::reconciliation::SetUpReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconcileSetUp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReconcilePinSketch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReconcilePinSketch() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ReconcilePinSketch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcilePinSketch(::grpc::ServerContext* /*context*/, const ::reconciliation::PinSketchRequest* /*request*/, ::reconciliation::PinSketchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconcilePinSketch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReconcileDDigest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReconcileDDigest() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ReconcileDDigest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileDDigest(::grpc::ServerContext* /*context*/, const ::reconciliation::DDigestRequest* /*request*/, ::reconciliation::DDigestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconcileDDigest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReconcileGraphene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReconcileGraphene() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ReconcileGraphene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileGraphene(::grpc::ServerContext* /*context*/, const ::reconciliation::GrapheneRequest* /*request*/, ::reconciliation::GrapheneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconcileGraphene(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReconcileParityBitmapSketch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReconcileParityBitmapSketch() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ReconcileParityBitmapSketch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileParityBitmapSketch(::grpc::ServerContext* /*context*/, const ::reconciliation::PbsRequest* /*request*/, ::reconciliation::PbsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconcileParityBitmapSketch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Synchronize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Synchronize() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Synchronize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Synchronize(::grpc::ServerContext* /*context*/, const ::reconciliation::SynchronizeMessage* /*request*/, ::reconciliation::SynchronizeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynchronize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Estimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Estimate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Estimate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Estimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Estimate(::grpc::ServerContext* /*context*/, const ::reconciliation::EstimateRequest* /*request*/, ::reconciliation::EstimateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Estimate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Estimate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReconcileSetUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReconcileSetUp() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReconcileSetUp(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReconcileSetUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileSetUp(::grpc::ServerContext* /*context*/, const ::reconciliation::SetUpRequest* /*request*/, ::reconciliation::SetUpReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReconcileSetUp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReconcileSetUp(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReconcilePinSketch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReconcilePinSketch() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReconcilePinSketch(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReconcilePinSketch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcilePinSketch(::grpc::ServerContext* /*context*/, const ::reconciliation::PinSketchRequest* /*request*/, ::reconciliation::PinSketchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReconcilePinSketch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReconcilePinSketch(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReconcileDDigest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReconcileDDigest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReconcileDDigest(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReconcileDDigest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileDDigest(::grpc::ServerContext* /*context*/, const ::reconciliation::DDigestRequest* /*request*/, ::reconciliation::DDigestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReconcileDDigest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReconcileDDigest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReconcileGraphene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReconcileGraphene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReconcileGraphene(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReconcileGraphene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileGraphene(::grpc::ServerContext* /*context*/, const ::reconciliation::GrapheneRequest* /*request*/, ::reconciliation::GrapheneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReconcileGraphene(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReconcileGraphene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReconcileParityBitmapSketch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReconcileParityBitmapSketch() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReconcileParityBitmapSketch(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReconcileParityBitmapSketch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconcileParityBitmapSketch(::grpc::ServerContext* /*context*/, const ::reconciliation::PbsRequest* /*request*/, ::reconciliation::PbsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReconcileParityBitmapSketch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReconcileParityBitmapSketch(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Synchronize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Synchronize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Synchronize(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Synchronize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Synchronize(::grpc::ServerContext* /*context*/, const ::reconciliation::SynchronizeMessage* /*request*/, ::reconciliation::SynchronizeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Synchronize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Synchronize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Estimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Estimate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::reconciliation::EstimateRequest, ::reconciliation::EstimateReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::reconciliation::EstimateRequest, ::reconciliation::EstimateReply>* streamer) {
                       return this->StreamedEstimate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Estimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Estimate(::grpc::ServerContext* /*context*/, const ::reconciliation::EstimateRequest* /*request*/, ::reconciliation::EstimateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEstimate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::reconciliation::EstimateRequest,::reconciliation::EstimateReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReconcileSetUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReconcileSetUp() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::reconciliation::SetUpRequest, ::reconciliation::SetUpReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::reconciliation::SetUpRequest, ::reconciliation::SetUpReply>* streamer) {
                       return this->StreamedReconcileSetUp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReconcileSetUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReconcileSetUp(::grpc::ServerContext* /*context*/, const ::reconciliation::SetUpRequest* /*request*/, ::reconciliation::SetUpReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReconcileSetUp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::reconciliation::SetUpRequest,::reconciliation::SetUpReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReconcilePinSketch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReconcilePinSketch() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::reconciliation::PinSketchRequest, ::reconciliation::PinSketchReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::reconciliation::PinSketchRequest, ::reconciliation::PinSketchReply>* streamer) {
                       return this->StreamedReconcilePinSketch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReconcilePinSketch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReconcilePinSketch(::grpc::ServerContext* /*context*/, const ::reconciliation::PinSketchRequest* /*request*/, ::reconciliation::PinSketchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReconcilePinSketch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::reconciliation::PinSketchRequest,::reconciliation::PinSketchReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReconcileDDigest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReconcileDDigest() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::reconciliation::DDigestRequest, ::reconciliation::DDigestReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::reconciliation::DDigestRequest, ::reconciliation::DDigestReply>* streamer) {
                       return this->StreamedReconcileDDigest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReconcileDDigest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReconcileDDigest(::grpc::ServerContext* /*context*/, const ::reconciliation::DDigestRequest* /*request*/, ::reconciliation::DDigestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReconcileDDigest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::reconciliation::DDigestRequest,::reconciliation::DDigestReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReconcileGraphene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReconcileGraphene() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::reconciliation::GrapheneRequest, ::reconciliation::GrapheneReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::reconciliation::GrapheneRequest, ::reconciliation::GrapheneReply>* streamer) {
                       return this->StreamedReconcileGraphene(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReconcileGraphene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReconcileGraphene(::grpc::ServerContext* /*context*/, const ::reconciliation::GrapheneRequest* /*request*/, ::reconciliation::GrapheneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReconcileGraphene(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::reconciliation::GrapheneRequest,::reconciliation::GrapheneReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReconcileParityBitmapSketch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReconcileParityBitmapSketch() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::reconciliation::PbsRequest, ::reconciliation::PbsReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::reconciliation::PbsRequest, ::reconciliation::PbsReply>* streamer) {
                       return this->StreamedReconcileParityBitmapSketch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReconcileParityBitmapSketch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReconcileParityBitmapSketch(::grpc::ServerContext* /*context*/, const ::reconciliation::PbsRequest* /*request*/, ::reconciliation::PbsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReconcileParityBitmapSketch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::reconciliation::PbsRequest,::reconciliation::PbsReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Synchronize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Synchronize() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::reconciliation::SynchronizeMessage, ::reconciliation::SynchronizeMessage>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::reconciliation::SynchronizeMessage, ::reconciliation::SynchronizeMessage>* streamer) {
                       return this->StreamedSynchronize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Synchronize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Synchronize(::grpc::ServerContext* /*context*/, const ::reconciliation::SynchronizeMessage* /*request*/, ::reconciliation::SynchronizeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSynchronize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::reconciliation::SynchronizeMessage,::reconciliation::SynchronizeMessage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Estimate<WithStreamedUnaryMethod_ReconcileSetUp<WithStreamedUnaryMethod_ReconcilePinSketch<WithStreamedUnaryMethod_ReconcileDDigest<WithStreamedUnaryMethod_ReconcileGraphene<WithStreamedUnaryMethod_ReconcileParityBitmapSketch<WithStreamedUnaryMethod_Synchronize<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Estimate<WithStreamedUnaryMethod_ReconcileSetUp<WithStreamedUnaryMethod_ReconcilePinSketch<WithStreamedUnaryMethod_ReconcileDDigest<WithStreamedUnaryMethod_ReconcileGraphene<WithStreamedUnaryMethod_ReconcileParityBitmapSketch<WithStreamedUnaryMethod_Synchronize<Service > > > > > > > StreamedService;
};

}  // namespace reconciliation


#endif  // GRPC_reconciliation_2eproto__INCLUDED

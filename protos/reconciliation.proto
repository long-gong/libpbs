syntax = "proto3";

package reconciliation;

// The estimation service
service Estimation {
    rpc Estimate(EstimateRequest) returns (EstimateReply) {}

    rpc ReconcileSetUp(SetUpRequest) returns (SetUpReply) {}

    rpc ReconcilePinSketch(PinSketchRequest) returns (PinSketchReply) {}

    rpc ReconcileDDigest(DDigestRequest) returns (DDigestReply) {}

    rpc ReconcileGraphene(GrapheneRequest) returns (GrapheneReply) {}

    rpc ReconcileParityBitmapSketch(PbsRequest) returns (PbsReply) {}

    rpc Synchronize(SynchronizeMessage) returns (SynchronizeMessage) {}
}

// request to setup an experiment
message SetUpRequest {
    enum Method {
        DDigest = 0;
        PinSketch = 1;
        Graphene = 2;
        PBS = 3;
        END = 4;
    }
    // which method to experiment with
    Method next_algorithm = 1;
    // seed for generate data
    uint32 seed = 2;
    // cardinality of the set difference size
    uint32 d = 3;
    // object size
    uint32 object_sz = 4;
    // union sz
    uint32 usz = 5;
}

// reply to setup request
message SetUpReply {
   // whether the method succeeded in the previous experiment
   enum PreviousExperimentStatus {
     NA = 0;
     SUCCEED = 1;
     FAILED = 2;
   }
   PreviousExperimentStatus status = 1;
}

// 
message EstimateRequest {
    repeated int32 sketches = 1;
}

// 
message EstimateReply {
    float estimated_value = 1;
}

message PinSketchRequest {
   bytes sketch = 1;
}

message PinSketchReply {
   repeated int32 missing_keys = 1;
   repeated KeyValue pushed_key_values = 2;
}


message PbsRequest {
    bytes encoding_msg = 1;
    bytes encoding_hint = 2;

    repeated KeyValue pushed_key_values = 3;
    repeated uint32 missing_keys = 4;
}

message PbsReply {
    bytes decoding_msg = 1;
    repeated uint32 xors = 2;
    repeated uint32 checksum = 3;

    repeated KeyValue pushed_key_values = 4;
}

message IbfCell {
   int32 count = 1;
   uint64 keySum = 2;
   uint32 keyCheck = 3;
}

message DDigestRequest {
   repeated IbfCell cells = 1;
}

message DDigestReply {
  bool succeed = 1;
  repeated int32 missing_keys = 2;
  repeated KeyValue pushed_key_values = 3;
}

message GrapheneRequest {
    uint32 m = 1; // set size
}

message GrapheneReply {
    uint32 a = 1;
    uint32 n = 2;
    double fpr = 3;
    bytes bf = 4;
    repeated IbfCell ibf = 5;
}

message KeyValue {
    int32 key = 1;
    string value = 2;
}

message SynchronizeMessage {
    repeated KeyValue pushes = 1;
    repeated int32 pulls = 2;
}

